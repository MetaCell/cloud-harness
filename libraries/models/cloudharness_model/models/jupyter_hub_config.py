from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cloudharness_model.models.base_model_ import Model
from cloudharness_model import util


class JupyterHubConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args=None, extra_config=None, spawner_extra_config=None, application_hook=None):  # noqa: E501
        """JupyterHubConfig - a model defined in OpenAPI

        :param args: The args of this JupyterHubConfig.  # noqa: E501
        :type args: List[str]
        :param extra_config: The extra_config of this JupyterHubConfig.  # noqa: E501
        :type extra_config: Dict[str, object]
        :param spawner_extra_config: The spawner_extra_config of this JupyterHubConfig.  # noqa: E501
        :type spawner_extra_config: Dict[str, object]
        :param application_hook: The application_hook of this JupyterHubConfig.  # noqa: E501
        :type application_hook: object
        """
        self.openapi_types = {
            'args': List[str],
            'extra_config': Dict[str, object],
            'spawner_extra_config': Dict[str, object],
            'application_hook': object
        }

        self.attribute_map = {
            'args': 'args',
            'extra_config': 'extraConfig',
            'spawner_extra_config': 'spawnerExtraConfig',
            'application_hook': 'applicationHook'
        }

        self._args = args
        self._extra_config = extra_config
        self._spawner_extra_config = spawner_extra_config
        self._application_hook = application_hook

    @classmethod
    def from_dict(cls, dikt) -> 'JupyterHubConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JupyterHubConfig of this JupyterHubConfig.  # noqa: E501
        :rtype: JupyterHubConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self) -> List[str]:
        """Gets the args of this JupyterHubConfig.

        arguments passed to the container  # noqa: E501

        :return: The args of this JupyterHubConfig.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args: List[str]):
        """Sets the args of this JupyterHubConfig.

        arguments passed to the container  # noqa: E501

        :param args: The args of this JupyterHubConfig.
        :type args: List[str]
        """

        self._args = args

    @property
    def extra_config(self) -> Dict[str, object]:
        """Gets the extra_config of this JupyterHubConfig.

          # noqa: E501

        :return: The extra_config of this JupyterHubConfig.
        :rtype: Dict[str, object]
        """
        return self._extra_config

    @extra_config.setter
    def extra_config(self, extra_config: Dict[str, object]):
        """Sets the extra_config of this JupyterHubConfig.

          # noqa: E501

        :param extra_config: The extra_config of this JupyterHubConfig.
        :type extra_config: Dict[str, object]
        """

        self._extra_config = extra_config

    @property
    def spawner_extra_config(self) -> Dict[str, object]:
        """Gets the spawner_extra_config of this JupyterHubConfig.

          # noqa: E501

        :return: The spawner_extra_config of this JupyterHubConfig.
        :rtype: Dict[str, object]
        """
        return self._spawner_extra_config

    @spawner_extra_config.setter
    def spawner_extra_config(self, spawner_extra_config: Dict[str, object]):
        """Sets the spawner_extra_config of this JupyterHubConfig.

          # noqa: E501

        :param spawner_extra_config: The spawner_extra_config of this JupyterHubConfig.
        :type spawner_extra_config: Dict[str, object]
        """

        self._spawner_extra_config = spawner_extra_config

    @property
    def application_hook(self) -> object:
        """Gets the application_hook of this JupyterHubConfig.

        change the hook function (advanced)  Specify the Python name of the function (full module path, the module must be  installed in the Docker image)  # noqa: E501

        :return: The application_hook of this JupyterHubConfig.
        :rtype: object
        """
        return self._application_hook

    @application_hook.setter
    def application_hook(self, application_hook: object):
        """Sets the application_hook of this JupyterHubConfig.

        change the hook function (advanced)  Specify the Python name of the function (full module path, the module must be  installed in the Docker image)  # noqa: E501

        :param application_hook: The application_hook of this JupyterHubConfig.
        :type application_hook: object
        """

        self._application_hook = application_hook
