from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cloudharness_model.models.base_model import Model
import re
from cloudharness_model import util

import re  # noqa: E501

class UriRoleMappingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uri=None, roles=None):  # noqa: E501
        """UriRoleMappingConfig - a model defined in OpenAPI

        :param uri: The uri of this UriRoleMappingConfig.  # noqa: E501
        :type uri: str
        :param roles: The roles of this UriRoleMappingConfig.  # noqa: E501
        :type roles: List[str]
        """
        self.openapi_types = {
            'uri': str,
            'roles': List[str]
        }

        self.attribute_map = {
            'uri': 'uri',
            'roles': 'roles'
        }

        self._uri = uri
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt) -> 'UriRoleMappingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UriRoleMappingConfig of this UriRoleMappingConfig.  # noqa: E501
        :rtype: UriRoleMappingConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uri(self) -> str:
        """Gets the uri of this UriRoleMappingConfig.

          # noqa: E501

        :return: The uri of this UriRoleMappingConfig.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this UriRoleMappingConfig.

          # noqa: E501

        :param uri: The uri of this UriRoleMappingConfig.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501
        if uri is not None and not re.search(r'^[^<>:;,?|]+$', uri):  # noqa: E501
            raise ValueError("Invalid value for `uri`, must be a follow pattern or equal to `/^[^<>:;,?|]+$/`")  # noqa: E501

        self._uri = uri

    @property
    def roles(self) -> List[str]:
        """Gets the roles of this UriRoleMappingConfig.

        Roles allowed to access the present uri  # noqa: E501

        :return: The roles of this UriRoleMappingConfig.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles: List[str]):
        """Sets the roles of this UriRoleMappingConfig.

        Roles allowed to access the present uri  # noqa: E501

        :param roles: The roles of this UriRoleMappingConfig.
        :type roles: List[str]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")  # noqa: E501

        self._roles = roles
