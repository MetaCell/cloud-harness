from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cloudharness_model.models.base_model_ import Model
from cloudharness_model.models.deployment_resources_conf import DeploymentResourcesConf
import re
from cloudharness_model import util

from cloudharness_model.models.deployment_resources_conf import DeploymentResourcesConf  # noqa: E501
import re  # noqa: E501

class BackupConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active=None, keep_days=None, keep_weeks=None, keep_months=None, schedule=None, suffix=None, volumesize=None, dir=None, resources=None):  # noqa: E501
        """BackupConfig - a model defined in OpenAPI

        :param active: The active of this BackupConfig.  # noqa: E501
        :type active: bool
        :param keep_days: The keep_days of this BackupConfig.  # noqa: E501
        :type keep_days: int
        :param keep_weeks: The keep_weeks of this BackupConfig.  # noqa: E501
        :type keep_weeks: int
        :param keep_months: The keep_months of this BackupConfig.  # noqa: E501
        :type keep_months: int
        :param schedule: The schedule of this BackupConfig.  # noqa: E501
        :type schedule: str
        :param suffix: The suffix of this BackupConfig.  # noqa: E501
        :type suffix: object
        :param volumesize: The volumesize of this BackupConfig.  # noqa: E501
        :type volumesize: str
        :param dir: The dir of this BackupConfig.  # noqa: E501
        :type dir: str
        :param resources: The resources of this BackupConfig.  # noqa: E501
        :type resources: DeploymentResourcesConf
        """
        self.openapi_types = {
            'active': bool,
            'keep_days': int,
            'keep_weeks': int,
            'keep_months': int,
            'schedule': str,
            'suffix': object,
            'volumesize': str,
            'dir': str,
            'resources': DeploymentResourcesConf
        }

        self.attribute_map = {
            'active': 'active',
            'keep_days': 'keep_days',
            'keep_weeks': 'keep_weeks',
            'keep_months': 'keep_months',
            'schedule': 'schedule',
            'suffix': 'suffix',
            'volumesize': 'volumesize',
            'dir': 'dir',
            'resources': 'resources'
        }

        self._active = active
        self._keep_days = keep_days
        self._keep_weeks = keep_weeks
        self._keep_months = keep_months
        self._schedule = schedule
        self._suffix = suffix
        self._volumesize = volumesize
        self._dir = dir
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt) -> 'BackupConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BackupConfig of this BackupConfig.  # noqa: E501
        :rtype: BackupConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this BackupConfig.

          # noqa: E501

        :return: The active of this BackupConfig.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this BackupConfig.

          # noqa: E501

        :param active: The active of this BackupConfig.
        :type active: bool
        """

        self._active = active

    @property
    def keep_days(self) -> int:
        """Gets the keep_days of this BackupConfig.

          # noqa: E501

        :return: The keep_days of this BackupConfig.
        :rtype: int
        """
        return self._keep_days

    @keep_days.setter
    def keep_days(self, keep_days: int):
        """Sets the keep_days of this BackupConfig.

          # noqa: E501

        :param keep_days: The keep_days of this BackupConfig.
        :type keep_days: int
        """

        self._keep_days = keep_days

    @property
    def keep_weeks(self) -> int:
        """Gets the keep_weeks of this BackupConfig.

          # noqa: E501

        :return: The keep_weeks of this BackupConfig.
        :rtype: int
        """
        return self._keep_weeks

    @keep_weeks.setter
    def keep_weeks(self, keep_weeks: int):
        """Sets the keep_weeks of this BackupConfig.

          # noqa: E501

        :param keep_weeks: The keep_weeks of this BackupConfig.
        :type keep_weeks: int
        """

        self._keep_weeks = keep_weeks

    @property
    def keep_months(self) -> int:
        """Gets the keep_months of this BackupConfig.

          # noqa: E501

        :return: The keep_months of this BackupConfig.
        :rtype: int
        """
        return self._keep_months

    @keep_months.setter
    def keep_months(self, keep_months: int):
        """Sets the keep_months of this BackupConfig.

          # noqa: E501

        :param keep_months: The keep_months of this BackupConfig.
        :type keep_months: int
        """

        self._keep_months = keep_months

    @property
    def schedule(self) -> str:
        """Gets the schedule of this BackupConfig.

        Cron expression  # noqa: E501

        :return: The schedule of this BackupConfig.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: str):
        """Sets the schedule of this BackupConfig.

        Cron expression  # noqa: E501

        :param schedule: The schedule of this BackupConfig.
        :type schedule: str
        """
        if schedule is not None and not re.search(r'(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\d+(ns|us|µs|ms|s|m|h))+)|((((\d+,)+\d+|(\d+(\/|-)\d+)|\d+|\*) ?){5,7})', schedule):  # noqa: E501
            raise ValueError("Invalid value for `schedule`, must be a follow pattern or equal to `/(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\d+(ns|us|µs|ms|s|m|h))+)|((((\d+,)+\d+|(\d+(\/|-)\d+)|\d+|\*) ?){5,7})/`")  # noqa: E501

        self._schedule = schedule

    @property
    def suffix(self) -> object:
        """Gets the suffix of this BackupConfig.

        The file suffix added to backup files  # noqa: E501

        :return: The suffix of this BackupConfig.
        :rtype: object
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix: object):
        """Sets the suffix of this BackupConfig.

        The file suffix added to backup files  # noqa: E501

        :param suffix: The suffix of this BackupConfig.
        :type suffix: object
        """

        self._suffix = suffix

    @property
    def volumesize(self) -> str:
        """Gets the volumesize of this BackupConfig.

        The volume size for backups (all backups share the same volume)  # noqa: E501

        :return: The volumesize of this BackupConfig.
        :rtype: str
        """
        return self._volumesize

    @volumesize.setter
    def volumesize(self, volumesize: str):
        """Sets the volumesize of this BackupConfig.

        The volume size for backups (all backups share the same volume)  # noqa: E501

        :param volumesize: The volumesize of this BackupConfig.
        :type volumesize: str
        """

        self._volumesize = volumesize

    @property
    def dir(self) -> str:
        """Gets the dir of this BackupConfig.

          # noqa: E501

        :return: The dir of this BackupConfig.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir: str):
        """Sets the dir of this BackupConfig.

          # noqa: E501

        :param dir: The dir of this BackupConfig.
        :type dir: str
        """
        if dir is None:
            raise ValueError("Invalid value for `dir`, must not be `None`")  # noqa: E501
        if dir is not None and not re.search(r'^[^<>:;,?*|]+$', dir):  # noqa: E501
            raise ValueError("Invalid value for `dir`, must be a follow pattern or equal to `/^[^<>:;,?*|]+$/`")  # noqa: E501

        self._dir = dir

    @property
    def resources(self) -> DeploymentResourcesConf:
        """Gets the resources of this BackupConfig.


        :return: The resources of this BackupConfig.
        :rtype: DeploymentResourcesConf
        """
        return self._resources

    @resources.setter
    def resources(self, resources: DeploymentResourcesConf):
        """Sets the resources of this BackupConfig.


        :param resources: The resources of this BackupConfig.
        :type resources: DeploymentResourcesConf
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")  # noqa: E501

        self._resources = resources
