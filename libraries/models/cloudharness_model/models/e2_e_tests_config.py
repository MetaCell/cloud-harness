# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cloudharness_model.models.base_model_ import Model
from cloudharness_model import util


class E2ETestsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled=None, smoketest=None, ignore_console_errors=None, ignore_request_errors=None):  # noqa: E501
        """E2ETestsConfig - a model defined in OpenAPI

        :param enabled: The enabled of this E2ETestsConfig.  # noqa: E501
        :type enabled: bool
        :param smoketest: The smoketest of this E2ETestsConfig.  # noqa: E501
        :type smoketest: bool
        :param ignore_console_errors: The ignore_console_errors of this E2ETestsConfig.  # noqa: E501
        :type ignore_console_errors: bool
        :param ignore_request_errors: The ignore_request_errors of this E2ETestsConfig.  # noqa: E501
        :type ignore_request_errors: bool
        """
        self.openapi_types = {
            'enabled': bool,
            'smoketest': bool,
            'ignore_console_errors': bool,
            'ignore_request_errors': bool
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'smoketest': 'smoketest',
            'ignore_console_errors': 'ignoreConsoleErrors',
            'ignore_request_errors': 'ignoreRequestErrors'
        }

        self._enabled = enabled
        self._smoketest = smoketest
        self._ignore_console_errors = ignore_console_errors
        self._ignore_request_errors = ignore_request_errors

    @classmethod
    def from_dict(cls, dikt) -> 'E2ETestsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The E2ETestsConfig of this E2ETestsConfig.  # noqa: E501
        :rtype: E2ETestsConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this E2ETestsConfig.

        Enables end to end testing for this application (default: false)  # noqa: E501

        :return: The enabled of this E2ETestsConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this E2ETestsConfig.

        Enables end to end testing for this application (default: false)  # noqa: E501

        :param enabled: The enabled of this E2ETestsConfig.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def smoketest(self):
        """Gets the smoketest of this E2ETestsConfig.

        Specify whether to run the common smoke tests  # noqa: E501

        :return: The smoketest of this E2ETestsConfig.
        :rtype: bool
        """
        return self._smoketest

    @smoketest.setter
    def smoketest(self, smoketest):
        """Sets the smoketest of this E2ETestsConfig.

        Specify whether to run the common smoke tests  # noqa: E501

        :param smoketest: The smoketest of this E2ETestsConfig.
        :type smoketest: bool
        """
        if smoketest is None:
            raise ValueError("Invalid value for `smoketest`, must not be `None`")  # noqa: E501

        self._smoketest = smoketest

    @property
    def ignore_console_errors(self):
        """Gets the ignore_console_errors of this E2ETestsConfig.

          # noqa: E501

        :return: The ignore_console_errors of this E2ETestsConfig.
        :rtype: bool
        """
        return self._ignore_console_errors

    @ignore_console_errors.setter
    def ignore_console_errors(self, ignore_console_errors):
        """Sets the ignore_console_errors of this E2ETestsConfig.

          # noqa: E501

        :param ignore_console_errors: The ignore_console_errors of this E2ETestsConfig.
        :type ignore_console_errors: bool
        """

        self._ignore_console_errors = ignore_console_errors

    @property
    def ignore_request_errors(self):
        """Gets the ignore_request_errors of this E2ETestsConfig.

          # noqa: E501

        :return: The ignore_request_errors of this E2ETestsConfig.
        :rtype: bool
        """
        return self._ignore_request_errors

    @ignore_request_errors.setter
    def ignore_request_errors(self, ignore_request_errors):
        """Sets the ignore_request_errors of this E2ETestsConfig.

          # noqa: E501

        :param ignore_request_errors: The ignore_request_errors of this E2ETestsConfig.
        :type ignore_request_errors: bool
        """

        self._ignore_request_errors = ignore_request_errors
