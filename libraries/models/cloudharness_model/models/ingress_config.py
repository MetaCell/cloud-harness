# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cloudharness_model.models.base_model_ import Model
from cloudharness_model.models.auto_artifact_spec import AutoArtifactSpec
from cloudharness_model.models.ingress_config_all_of import IngressConfigAllOf
from cloudharness_model.models.ingress_config_all_of_letsencrypt import IngressConfigAllOfLetsencrypt
from cloudharness_model import util

from cloudharness_model.models.auto_artifact_spec import AutoArtifactSpec  # noqa: E501
from cloudharness_model.models.ingress_config_all_of import IngressConfigAllOf  # noqa: E501
from cloudharness_model.models.ingress_config_all_of_letsencrypt import IngressConfigAllOfLetsencrypt  # noqa: E501

class IngressConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ssl_redirect=None, letsencrypt=None, auto=None, name=None):  # noqa: E501
        """IngressConfig - a model defined in OpenAPI

        :param ssl_redirect: The ssl_redirect of this IngressConfig.  # noqa: E501
        :type ssl_redirect: bool
        :param letsencrypt: The letsencrypt of this IngressConfig.  # noqa: E501
        :type letsencrypt: IngressConfigAllOfLetsencrypt
        :param auto: The auto of this IngressConfig.  # noqa: E501
        :type auto: bool
        :param name: The name of this IngressConfig.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'ssl_redirect': bool,
            'letsencrypt': IngressConfigAllOfLetsencrypt,
            'auto': bool,
            'name': str
        }

        self.attribute_map = {
            'ssl_redirect': 'ssl_redirect',
            'letsencrypt': 'letsencrypt',
            'auto': 'auto',
            'name': 'name'
        }

        self._ssl_redirect = ssl_redirect
        self._letsencrypt = letsencrypt
        self._auto = auto
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'IngressConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IngressConfig of this IngressConfig.  # noqa: E501
        :rtype: IngressConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ssl_redirect(self):
        """Gets the ssl_redirect of this IngressConfig.


        :return: The ssl_redirect of this IngressConfig.
        :rtype: bool
        """
        return self._ssl_redirect

    @ssl_redirect.setter
    def ssl_redirect(self, ssl_redirect):
        """Sets the ssl_redirect of this IngressConfig.


        :param ssl_redirect: The ssl_redirect of this IngressConfig.
        :type ssl_redirect: bool
        """

        self._ssl_redirect = ssl_redirect

    @property
    def letsencrypt(self):
        """Gets the letsencrypt of this IngressConfig.


        :return: The letsencrypt of this IngressConfig.
        :rtype: IngressConfigAllOfLetsencrypt
        """
        return self._letsencrypt

    @letsencrypt.setter
    def letsencrypt(self, letsencrypt):
        """Sets the letsencrypt of this IngressConfig.


        :param letsencrypt: The letsencrypt of this IngressConfig.
        :type letsencrypt: IngressConfigAllOfLetsencrypt
        """

        self._letsencrypt = letsencrypt

    @property
    def auto(self):
        """Gets the auto of this IngressConfig.

        When true, enables automatic template  # noqa: E501

        :return: The auto of this IngressConfig.
        :rtype: bool
        """
        return self._auto

    @auto.setter
    def auto(self, auto):
        """Sets the auto of this IngressConfig.

        When true, enables automatic template  # noqa: E501

        :param auto: The auto of this IngressConfig.
        :type auto: bool
        """
        if auto is None:
            raise ValueError("Invalid value for `auto`, must not be `None`")  # noqa: E501

        self._auto = auto

    @property
    def name(self):
        """Gets the name of this IngressConfig.


        :return: The name of this IngressConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IngressConfig.


        :param name: The name of this IngressConfig.
        :type name: str
        """

        self._name = name
