from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cloudharness_model.models.base_model_ import Model
from cloudharness_model.models.application_accounts_config import ApplicationAccountsConfig
from cloudharness_model.models.application_dependencies_config import ApplicationDependenciesConfig
from cloudharness_model.models.application_probe import ApplicationProbe
from cloudharness_model.models.application_test_config import ApplicationTestConfig
from cloudharness_model.models.database_deployment_config import DatabaseDeploymentConfig
from cloudharness_model.models.deployment_auto_artifact_config import DeploymentAutoArtifactConfig
from cloudharness_model.models.file_resources_config import FileResourcesConfig
from cloudharness_model.models.jupyter_hub_config import JupyterHubConfig
from cloudharness_model.models.service_auto_artifact_config import ServiceAutoArtifactConfig
from cloudharness_model.models.uri_role_mapping_config import UriRoleMappingConfig
import re
from cloudharness_model import util

from cloudharness_model.models.application_accounts_config import ApplicationAccountsConfig  # noqa: E501
from cloudharness_model.models.application_dependencies_config import ApplicationDependenciesConfig  # noqa: E501
from cloudharness_model.models.application_probe import ApplicationProbe  # noqa: E501
from cloudharness_model.models.application_test_config import ApplicationTestConfig  # noqa: E501
from cloudharness_model.models.database_deployment_config import DatabaseDeploymentConfig  # noqa: E501
from cloudharness_model.models.deployment_auto_artifact_config import DeploymentAutoArtifactConfig  # noqa: E501
from cloudharness_model.models.file_resources_config import FileResourcesConfig  # noqa: E501
from cloudharness_model.models.jupyter_hub_config import JupyterHubConfig  # noqa: E501
from cloudharness_model.models.service_auto_artifact_config import ServiceAutoArtifactConfig  # noqa: E501
from cloudharness_model.models.uri_role_mapping_config import UriRoleMappingConfig  # noqa: E501
import re  # noqa: E501

class ApplicationHarnessConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment=None, service=None, subdomain=None, aliases=None, domain=None, dependencies=None, secured=None, uri_role_mapping=None, secrets=None, use_services=None, database=None, resources=None, readiness_probe=None, startup_probe=None, liveness_probe=None, source_root=None, name=None, jupyterhub=None, accounts=None, test=None, quotas=None):  # noqa: E501
        """ApplicationHarnessConfig - a model defined in OpenAPI

        :param deployment: The deployment of this ApplicationHarnessConfig.  # noqa: E501
        :type deployment: DeploymentAutoArtifactConfig
        :param service: The service of this ApplicationHarnessConfig.  # noqa: E501
        :type service: ServiceAutoArtifactConfig
        :param subdomain: The subdomain of this ApplicationHarnessConfig.  # noqa: E501
        :type subdomain: str
        :param aliases: The aliases of this ApplicationHarnessConfig.  # noqa: E501
        :type aliases: List[str]
        :param domain: The domain of this ApplicationHarnessConfig.  # noqa: E501
        :type domain: str
        :param dependencies: The dependencies of this ApplicationHarnessConfig.  # noqa: E501
        :type dependencies: ApplicationDependenciesConfig
        :param secured: The secured of this ApplicationHarnessConfig.  # noqa: E501
        :type secured: bool
        :param uri_role_mapping: The uri_role_mapping of this ApplicationHarnessConfig.  # noqa: E501
        :type uri_role_mapping: List[UriRoleMappingConfig]
        :param secrets: The secrets of this ApplicationHarnessConfig.  # noqa: E501
        :type secrets: Dict[str, object]
        :param use_services: The use_services of this ApplicationHarnessConfig.  # noqa: E501
        :type use_services: List[str]
        :param database: The database of this ApplicationHarnessConfig.  # noqa: E501
        :type database: DatabaseDeploymentConfig
        :param resources: The resources of this ApplicationHarnessConfig.  # noqa: E501
        :type resources: List[FileResourcesConfig]
        :param readiness_probe: The readiness_probe of this ApplicationHarnessConfig.  # noqa: E501
        :type readiness_probe: ApplicationProbe
        :param startup_probe: The startup_probe of this ApplicationHarnessConfig.  # noqa: E501
        :type startup_probe: ApplicationProbe
        :param liveness_probe: The liveness_probe of this ApplicationHarnessConfig.  # noqa: E501
        :type liveness_probe: ApplicationProbe
        :param source_root: The source_root of this ApplicationHarnessConfig.  # noqa: E501
        :type source_root: str
        :param name: The name of this ApplicationHarnessConfig.  # noqa: E501
        :type name: str
        :param jupyterhub: The jupyterhub of this ApplicationHarnessConfig.  # noqa: E501
        :type jupyterhub: JupyterHubConfig
        :param accounts: The accounts of this ApplicationHarnessConfig.  # noqa: E501
        :type accounts: ApplicationAccountsConfig
        :param test: The test of this ApplicationHarnessConfig.  # noqa: E501
        :type test: ApplicationTestConfig
        :param quotas: The quotas of this ApplicationHarnessConfig.  # noqa: E501
        :type quotas: Dict[str, object]
        """
        self.openapi_types = {
            'deployment': DeploymentAutoArtifactConfig,
            'service': ServiceAutoArtifactConfig,
            'subdomain': str,
            'aliases': List[str],
            'domain': str,
            'dependencies': ApplicationDependenciesConfig,
            'secured': bool,
            'uri_role_mapping': List[UriRoleMappingConfig],
            'secrets': Dict[str, object],
            'use_services': List[str],
            'database': DatabaseDeploymentConfig,
            'resources': List[FileResourcesConfig],
            'readiness_probe': ApplicationProbe,
            'startup_probe': ApplicationProbe,
            'liveness_probe': ApplicationProbe,
            'source_root': str,
            'name': str,
            'jupyterhub': JupyterHubConfig,
            'accounts': ApplicationAccountsConfig,
            'test': ApplicationTestConfig,
            'quotas': Dict[str, object]
        }

        self.attribute_map = {
            'deployment': 'deployment',
            'service': 'service',
            'subdomain': 'subdomain',
            'aliases': 'aliases',
            'domain': 'domain',
            'dependencies': 'dependencies',
            'secured': 'secured',
            'uri_role_mapping': 'uri_role_mapping',
            'secrets': 'secrets',
            'use_services': 'use_services',
            'database': 'database',
            'resources': 'resources',
            'readiness_probe': 'readinessProbe',
            'startup_probe': 'startupProbe',
            'liveness_probe': 'livenessProbe',
            'source_root': 'sourceRoot',
            'name': 'name',
            'jupyterhub': 'jupyterhub',
            'accounts': 'accounts',
            'test': 'test',
            'quotas': 'quotas'
        }

        self._deployment = deployment
        self._service = service
        self._subdomain = subdomain
        self._aliases = aliases
        self._domain = domain
        self._dependencies = dependencies
        self._secured = secured
        self._uri_role_mapping = uri_role_mapping
        self._secrets = secrets
        self._use_services = use_services
        self._database = database
        self._resources = resources
        self._readiness_probe = readiness_probe
        self._startup_probe = startup_probe
        self._liveness_probe = liveness_probe
        self._source_root = source_root
        self._name = name
        self._jupyterhub = jupyterhub
        self._accounts = accounts
        self._test = test
        self._quotas = quotas

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicationHarnessConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplicationHarnessConfig of this ApplicationHarnessConfig.  # noqa: E501
        :rtype: ApplicationHarnessConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment(self) -> DeploymentAutoArtifactConfig:
        """Gets the deployment of this ApplicationHarnessConfig.


        :return: The deployment of this ApplicationHarnessConfig.
        :rtype: DeploymentAutoArtifactConfig
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment: DeploymentAutoArtifactConfig):
        """Sets the deployment of this ApplicationHarnessConfig.


        :param deployment: The deployment of this ApplicationHarnessConfig.
        :type deployment: DeploymentAutoArtifactConfig
        """

        self._deployment = deployment

    @property
    def service(self) -> ServiceAutoArtifactConfig:
        """Gets the service of this ApplicationHarnessConfig.


        :return: The service of this ApplicationHarnessConfig.
        :rtype: ServiceAutoArtifactConfig
        """
        return self._service

    @service.setter
    def service(self, service: ServiceAutoArtifactConfig):
        """Sets the service of this ApplicationHarnessConfig.


        :param service: The service of this ApplicationHarnessConfig.
        :type service: ServiceAutoArtifactConfig
        """

        self._service = service

    @property
    def subdomain(self) -> str:
        """Gets the subdomain of this ApplicationHarnessConfig.

        If specified, an ingress will be created at [subdomain].[.Values.domain]  # noqa: E501

        :return: The subdomain of this ApplicationHarnessConfig.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain: str):
        """Sets the subdomain of this ApplicationHarnessConfig.

        If specified, an ingress will be created at [subdomain].[.Values.domain]  # noqa: E501

        :param subdomain: The subdomain of this ApplicationHarnessConfig.
        :type subdomain: str
        """

        self._subdomain = subdomain

    @property
    def aliases(self) -> List[str]:
        """Gets the aliases of this ApplicationHarnessConfig.

        If specified, an ingress will be created at [alias].[.Values.domain] for each alias  # noqa: E501

        :return: The aliases of this ApplicationHarnessConfig.
        :rtype: List[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases: List[str]):
        """Sets the aliases of this ApplicationHarnessConfig.

        If specified, an ingress will be created at [alias].[.Values.domain] for each alias  # noqa: E501

        :param aliases: The aliases of this ApplicationHarnessConfig.
        :type aliases: List[str]
        """

        self._aliases = aliases

    @property
    def domain(self) -> str:
        """Gets the domain of this ApplicationHarnessConfig.

        If specified, an ingress will be created at [domain]  # noqa: E501

        :return: The domain of this ApplicationHarnessConfig.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this ApplicationHarnessConfig.

        If specified, an ingress will be created at [domain]  # noqa: E501

        :param domain: The domain of this ApplicationHarnessConfig.
        :type domain: str
        """

        self._domain = domain

    @property
    def dependencies(self) -> ApplicationDependenciesConfig:
        """Gets the dependencies of this ApplicationHarnessConfig.


        :return: The dependencies of this ApplicationHarnessConfig.
        :rtype: ApplicationDependenciesConfig
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies: ApplicationDependenciesConfig):
        """Sets the dependencies of this ApplicationHarnessConfig.


        :param dependencies: The dependencies of this ApplicationHarnessConfig.
        :type dependencies: ApplicationDependenciesConfig
        """

        self._dependencies = dependencies

    @property
    def secured(self) -> bool:
        """Gets the secured of this ApplicationHarnessConfig.

        When true, the application is shielded with a getekeeper  # noqa: E501

        :return: The secured of this ApplicationHarnessConfig.
        :rtype: bool
        """
        return self._secured

    @secured.setter
    def secured(self, secured: bool):
        """Sets the secured of this ApplicationHarnessConfig.

        When true, the application is shielded with a getekeeper  # noqa: E501

        :param secured: The secured of this ApplicationHarnessConfig.
        :type secured: bool
        """

        self._secured = secured

    @property
    def uri_role_mapping(self) -> List[UriRoleMappingConfig]:
        """Gets the uri_role_mapping of this ApplicationHarnessConfig.

        Map uri/roles to secure with the Gatekeeper (if `secured: true`)  # noqa: E501

        :return: The uri_role_mapping of this ApplicationHarnessConfig.
        :rtype: List[UriRoleMappingConfig]
        """
        return self._uri_role_mapping

    @uri_role_mapping.setter
    def uri_role_mapping(self, uri_role_mapping: List[UriRoleMappingConfig]):
        """Sets the uri_role_mapping of this ApplicationHarnessConfig.

        Map uri/roles to secure with the Gatekeeper (if `secured: true`)  # noqa: E501

        :param uri_role_mapping: The uri_role_mapping of this ApplicationHarnessConfig.
        :type uri_role_mapping: List[UriRoleMappingConfig]
        """

        self._uri_role_mapping = uri_role_mapping

    @property
    def secrets(self) -> Dict[str, object]:
        """Gets the secrets of this ApplicationHarnessConfig.

          # noqa: E501

        :return: The secrets of this ApplicationHarnessConfig.
        :rtype: Dict[str, object]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets: Dict[str, object]):
        """Sets the secrets of this ApplicationHarnessConfig.

          # noqa: E501

        :param secrets: The secrets of this ApplicationHarnessConfig.
        :type secrets: Dict[str, object]
        """

        self._secrets = secrets

    @property
    def use_services(self) -> List[str]:
        """Gets the use_services of this ApplicationHarnessConfig.

        Specify which services this application uses in the frontend to create proxy ingresses. e.g.  ``` - name: samples ```  # noqa: E501

        :return: The use_services of this ApplicationHarnessConfig.
        :rtype: List[str]
        """
        return self._use_services

    @use_services.setter
    def use_services(self, use_services: List[str]):
        """Sets the use_services of this ApplicationHarnessConfig.

        Specify which services this application uses in the frontend to create proxy ingresses. e.g.  ``` - name: samples ```  # noqa: E501

        :param use_services: The use_services of this ApplicationHarnessConfig.
        :type use_services: List[str]
        """

        self._use_services = use_services

    @property
    def database(self) -> DatabaseDeploymentConfig:
        """Gets the database of this ApplicationHarnessConfig.


        :return: The database of this ApplicationHarnessConfig.
        :rtype: DatabaseDeploymentConfig
        """
        return self._database

    @database.setter
    def database(self, database: DatabaseDeploymentConfig):
        """Sets the database of this ApplicationHarnessConfig.


        :param database: The database of this ApplicationHarnessConfig.
        :type database: DatabaseDeploymentConfig
        """

        self._database = database

    @property
    def resources(self) -> List[FileResourcesConfig]:
        """Gets the resources of this ApplicationHarnessConfig.

        Application file resources. Maps from deploy/resources folder and mounts as configmaps  # noqa: E501

        :return: The resources of this ApplicationHarnessConfig.
        :rtype: List[FileResourcesConfig]
        """
        return self._resources

    @resources.setter
    def resources(self, resources: List[FileResourcesConfig]):
        """Sets the resources of this ApplicationHarnessConfig.

        Application file resources. Maps from deploy/resources folder and mounts as configmaps  # noqa: E501

        :param resources: The resources of this ApplicationHarnessConfig.
        :type resources: List[FileResourcesConfig]
        """

        self._resources = resources

    @property
    def readiness_probe(self) -> ApplicationProbe:
        """Gets the readiness_probe of this ApplicationHarnessConfig.


        :return: The readiness_probe of this ApplicationHarnessConfig.
        :rtype: ApplicationProbe
        """
        return self._readiness_probe

    @readiness_probe.setter
    def readiness_probe(self, readiness_probe: ApplicationProbe):
        """Sets the readiness_probe of this ApplicationHarnessConfig.


        :param readiness_probe: The readiness_probe of this ApplicationHarnessConfig.
        :type readiness_probe: ApplicationProbe
        """

        self._readiness_probe = readiness_probe

    @property
    def startup_probe(self) -> ApplicationProbe:
        """Gets the startup_probe of this ApplicationHarnessConfig.


        :return: The startup_probe of this ApplicationHarnessConfig.
        :rtype: ApplicationProbe
        """
        return self._startup_probe

    @startup_probe.setter
    def startup_probe(self, startup_probe: ApplicationProbe):
        """Sets the startup_probe of this ApplicationHarnessConfig.


        :param startup_probe: The startup_probe of this ApplicationHarnessConfig.
        :type startup_probe: ApplicationProbe
        """

        self._startup_probe = startup_probe

    @property
    def liveness_probe(self) -> ApplicationProbe:
        """Gets the liveness_probe of this ApplicationHarnessConfig.


        :return: The liveness_probe of this ApplicationHarnessConfig.
        :rtype: ApplicationProbe
        """
        return self._liveness_probe

    @liveness_probe.setter
    def liveness_probe(self, liveness_probe: ApplicationProbe):
        """Sets the liveness_probe of this ApplicationHarnessConfig.


        :param liveness_probe: The liveness_probe of this ApplicationHarnessConfig.
        :type liveness_probe: ApplicationProbe
        """

        self._liveness_probe = liveness_probe

    @property
    def source_root(self) -> str:
        """Gets the source_root of this ApplicationHarnessConfig.

          # noqa: E501

        :return: The source_root of this ApplicationHarnessConfig.
        :rtype: str
        """
        return self._source_root

    @source_root.setter
    def source_root(self, source_root: str):
        """Sets the source_root of this ApplicationHarnessConfig.

          # noqa: E501

        :param source_root: The source_root of this ApplicationHarnessConfig.
        :type source_root: str
        """
        if source_root is not None and not re.search(r'^[^<>:;,?*|]+$', source_root):  # noqa: E501
            raise ValueError("Invalid value for `source_root`, must be a follow pattern or equal to `/^[^<>:;,?*|]+$/`")  # noqa: E501

        self._source_root = source_root

    @property
    def name(self) -> str:
        """Gets the name of this ApplicationHarnessConfig.

        Application's name. Do not edit, the value is automatically set from the application directory's name  # noqa: E501

        :return: The name of this ApplicationHarnessConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ApplicationHarnessConfig.

        Application's name. Do not edit, the value is automatically set from the application directory's name  # noqa: E501

        :param name: The name of this ApplicationHarnessConfig.
        :type name: str
        """

        self._name = name

    @property
    def jupyterhub(self) -> JupyterHubConfig:
        """Gets the jupyterhub of this ApplicationHarnessConfig.


        :return: The jupyterhub of this ApplicationHarnessConfig.
        :rtype: JupyterHubConfig
        """
        return self._jupyterhub

    @jupyterhub.setter
    def jupyterhub(self, jupyterhub: JupyterHubConfig):
        """Sets the jupyterhub of this ApplicationHarnessConfig.


        :param jupyterhub: The jupyterhub of this ApplicationHarnessConfig.
        :type jupyterhub: JupyterHubConfig
        """

        self._jupyterhub = jupyterhub

    @property
    def accounts(self) -> ApplicationAccountsConfig:
        """Gets the accounts of this ApplicationHarnessConfig.


        :return: The accounts of this ApplicationHarnessConfig.
        :rtype: ApplicationAccountsConfig
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts: ApplicationAccountsConfig):
        """Sets the accounts of this ApplicationHarnessConfig.


        :param accounts: The accounts of this ApplicationHarnessConfig.
        :type accounts: ApplicationAccountsConfig
        """

        self._accounts = accounts

    @property
    def test(self) -> ApplicationTestConfig:
        """Gets the test of this ApplicationHarnessConfig.


        :return: The test of this ApplicationHarnessConfig.
        :rtype: ApplicationTestConfig
        """
        return self._test

    @test.setter
    def test(self, test: ApplicationTestConfig):
        """Sets the test of this ApplicationHarnessConfig.


        :param test: The test of this ApplicationHarnessConfig.
        :type test: ApplicationTestConfig
        """

        self._test = test

    @property
    def quotas(self) -> Dict[str, object]:
        """Gets the quotas of this ApplicationHarnessConfig.

          # noqa: E501

        :return: The quotas of this ApplicationHarnessConfig.
        :rtype: Dict[str, object]
        """
        return self._quotas

    @quotas.setter
    def quotas(self, quotas: Dict[str, object]):
        """Sets the quotas of this ApplicationHarnessConfig.

          # noqa: E501

        :param quotas: The quotas of this ApplicationHarnessConfig.
        :type quotas: Dict[str, object]
        """

        self._quotas = quotas
