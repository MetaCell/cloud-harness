# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cloudharness_model.models.base_model_ import Model
from cloudharness_model.models.deployment_resources_conf import DeploymentResourcesConf
from cloudharness_model.models.deployment_volume_spec import DeploymentVolumeSpec
import re
from cloudharness_model import util

from cloudharness_model.models.deployment_resources_conf import DeploymentResourcesConf  # noqa: E501
from cloudharness_model.models.deployment_volume_spec import DeploymentVolumeSpec  # noqa: E501
import re  # noqa: E501

class DeploymentAutoArtifactConfigAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, port=None, replicas=None, image=None, resources=None, volume=None):  # noqa: E501
        """DeploymentAutoArtifactConfigAllOf - a model defined in OpenAPI

        :param port: The port of this DeploymentAutoArtifactConfigAllOf.  # noqa: E501
        :type port: str
        :param replicas: The replicas of this DeploymentAutoArtifactConfigAllOf.  # noqa: E501
        :type replicas: int
        :param image: The image of this DeploymentAutoArtifactConfigAllOf.  # noqa: E501
        :type image: str
        :param resources: The resources of this DeploymentAutoArtifactConfigAllOf.  # noqa: E501
        :type resources: DeploymentResourcesConf
        :param volume: The volume of this DeploymentAutoArtifactConfigAllOf.  # noqa: E501
        :type volume: DeploymentVolumeSpec
        """
        self.openapi_types = {
            'port': str,
            'replicas': int,
            'image': str,
            'resources': DeploymentResourcesConf,
            'volume': DeploymentVolumeSpec
        }

        self.attribute_map = {
            'port': 'port',
            'replicas': 'replicas',
            'image': 'image',
            'resources': 'resources',
            'volume': 'volume'
        }

        self._port = port
        self._replicas = replicas
        self._image = image
        self._resources = resources
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt) -> 'DeploymentAutoArtifactConfigAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeploymentAutoArtifactConfig_allOf of this DeploymentAutoArtifactConfigAllOf.  # noqa: E501
        :rtype: DeploymentAutoArtifactConfigAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def port(self):
        """Gets the port of this DeploymentAutoArtifactConfigAllOf.

        Deployment port  # noqa: E501

        :return: The port of this DeploymentAutoArtifactConfigAllOf.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DeploymentAutoArtifactConfigAllOf.

        Deployment port  # noqa: E501

        :param port: The port of this DeploymentAutoArtifactConfigAllOf.
        :type port: str
        """

        self._port = port

    @property
    def replicas(self):
        """Gets the replicas of this DeploymentAutoArtifactConfigAllOf.

        Number of replicas  # noqa: E501

        :return: The replicas of this DeploymentAutoArtifactConfigAllOf.
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this DeploymentAutoArtifactConfigAllOf.

        Number of replicas  # noqa: E501

        :param replicas: The replicas of this DeploymentAutoArtifactConfigAllOf.
        :type replicas: int
        """

        self._replicas = replicas

    @property
    def image(self):
        """Gets the image of this DeploymentAutoArtifactConfigAllOf.

        Image name to use in the deployment. Leave it blank to set from the application's Docker file  # noqa: E501

        :return: The image of this DeploymentAutoArtifactConfigAllOf.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DeploymentAutoArtifactConfigAllOf.

        Image name to use in the deployment. Leave it blank to set from the application's Docker file  # noqa: E501

        :param image: The image of this DeploymentAutoArtifactConfigAllOf.
        :type image: str
        """
        if image is not None and not re.search(r'(?:[a-z]+\/)?([a-z]+)(?::[0-9]+)?', image):  # noqa: E501
            raise ValueError("Invalid value for `image`, must be a follow pattern or equal to `/(?:[a-z]+\/)?([a-z]+)(?::[0-9]+)?/`")  # noqa: E501

        self._image = image

    @property
    def resources(self):
        """Gets the resources of this DeploymentAutoArtifactConfigAllOf.


        :return: The resources of this DeploymentAutoArtifactConfigAllOf.
        :rtype: DeploymentResourcesConf
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this DeploymentAutoArtifactConfigAllOf.


        :param resources: The resources of this DeploymentAutoArtifactConfigAllOf.
        :type resources: DeploymentResourcesConf
        """

        self._resources = resources

    @property
    def volume(self):
        """Gets the volume of this DeploymentAutoArtifactConfigAllOf.


        :return: The volume of this DeploymentAutoArtifactConfigAllOf.
        :rtype: DeploymentVolumeSpec
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this DeploymentAutoArtifactConfigAllOf.


        :param volume: The volume of this DeploymentAutoArtifactConfigAllOf.
        :type volume: DeploymentVolumeSpec
        """

        self._volume = volume
