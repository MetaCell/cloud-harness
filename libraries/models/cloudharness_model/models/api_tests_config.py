# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cloudharness_model.models.base_model_ import Model
from cloudharness_model import util


class ApiTestsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled=None, autotest=None):  # noqa: E501
        """ApiTestsConfig - a model defined in OpenAPI

        :param enabled: The enabled of this ApiTestsConfig.  # noqa: E501
        :type enabled: bool
        :param autotest: The autotest of this ApiTestsConfig.  # noqa: E501
        :type autotest: bool
        """
        self.openapi_types = {
            'enabled': bool,
            'autotest': bool
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'autotest': 'autotest'
        }

        self._enabled = enabled
        self._autotest = autotest

    @classmethod
    def from_dict(cls, dikt) -> 'ApiTestsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApiTestsConfig of this ApiTestsConfig.  # noqa: E501
        :rtype: ApiTestsConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this ApiTestsConfig.


        :return: The enabled of this ApiTestsConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApiTestsConfig.


        :param enabled: The enabled of this ApiTestsConfig.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def autotest(self):
        """Gets the autotest of this ApiTestsConfig.

        Specify whether to run the common smoke tests  # noqa: E501

        :return: The autotest of this ApiTestsConfig.
        :rtype: bool
        """
        return self._autotest

    @autotest.setter
    def autotest(self, autotest):
        """Sets the autotest of this ApiTestsConfig.

        Specify whether to run the common smoke tests  # noqa: E501

        :param autotest: The autotest of this ApiTestsConfig.
        :type autotest: bool
        """
        if autotest is None:
            raise ValueError("Invalid value for `autotest`, must not be `None`")  # noqa: E501

        self._autotest = autotest
