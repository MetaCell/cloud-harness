from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cloudharness_model.models.base_model import Model
from cloudharness_model import util


class UserRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes=None, client_role=None, composite=None, container_id=None, description=None, id=None, name=None):  # noqa: E501
        """UserRole - a model defined in OpenAPI

        :param attributes: The attributes of this UserRole.  # noqa: E501
        :type attributes: Dict[str, object]
        :param client_role: The client_role of this UserRole.  # noqa: E501
        :type client_role: bool
        :param composite: The composite of this UserRole.  # noqa: E501
        :type composite: bool
        :param container_id: The container_id of this UserRole.  # noqa: E501
        :type container_id: str
        :param description: The description of this UserRole.  # noqa: E501
        :type description: str
        :param id: The id of this UserRole.  # noqa: E501
        :type id: str
        :param name: The name of this UserRole.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'attributes': Dict[str, object],
            'client_role': bool,
            'composite': bool,
            'container_id': str,
            'description': str,
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'client_role': 'clientRole',
            'composite': 'composite',
            'container_id': 'containerId',
            'description': 'description',
            'id': 'id',
            'name': 'name'
        }

        self._attributes = attributes
        self._client_role = client_role
        self._composite = composite
        self._container_id = container_id
        self._description = description
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'UserRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserRole of this UserRole.  # noqa: E501
        :rtype: UserRole
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self) -> Dict[str, object]:
        """Gets the attributes of this UserRole.


        :return: The attributes of this UserRole.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: Dict[str, object]):
        """Sets the attributes of this UserRole.


        :param attributes: The attributes of this UserRole.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def client_role(self) -> bool:
        """Gets the client_role of this UserRole.


        :return: The client_role of this UserRole.
        :rtype: bool
        """
        return self._client_role

    @client_role.setter
    def client_role(self, client_role: bool):
        """Sets the client_role of this UserRole.


        :param client_role: The client_role of this UserRole.
        :type client_role: bool
        """

        self._client_role = client_role

    @property
    def composite(self) -> bool:
        """Gets the composite of this UserRole.


        :return: The composite of this UserRole.
        :rtype: bool
        """
        return self._composite

    @composite.setter
    def composite(self, composite: bool):
        """Sets the composite of this UserRole.


        :param composite: The composite of this UserRole.
        :type composite: bool
        """

        self._composite = composite

    @property
    def container_id(self) -> str:
        """Gets the container_id of this UserRole.


        :return: The container_id of this UserRole.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id: str):
        """Sets the container_id of this UserRole.


        :param container_id: The container_id of this UserRole.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def description(self) -> str:
        """Gets the description of this UserRole.


        :return: The description of this UserRole.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this UserRole.


        :param description: The description of this UserRole.
        :type description: str
        """

        self._description = description

    @property
    def id(self) -> str:
        """Gets the id of this UserRole.


        :return: The id of this UserRole.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this UserRole.


        :param id: The id of this UserRole.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this UserRole.


        :return: The name of this UserRole.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UserRole.


        :param name: The name of this UserRole.
        :type name: str
        """

        self._name = name
