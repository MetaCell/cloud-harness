#!/usr/bin/env python

import sys
import os
import shutil
import re
import tempfile
import subprocess
import logging

from ch_cli_tools import CH_ROOT
from cloudharness_utils.constants import APPLICATION_TEMPLATE_PATH
from ch_cli_tools.openapi import generate_server, generate_fastapi_server, APPLICATIONS_SRC_PATH, generate_ts_client
from ch_cli_tools.utils import merge_configuration_directories, replaceindir, replace_in_file, \
    to_python_module, copymergedir

# Only allow lowercased alphabetical characters separated by "-".
name_pattern = re.compile("[a-z]+((-)?[a-z])?")

PLACEHOLDER = '__APP_NAME__'

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description='Creates a new Application.')
    parser.add_argument('name', metavar='name', type=str,
                        help='Application name')
    parser.add_argument('-t', '--template', dest='templates', action="append", default=['base', ],
                        help="""Add a template name. 
                        
                        Available templates:
                        - flask-server (backend flask server based on openapi)
                        - webapp (React webapp including backend and frontend)
                        - db-postgres
                        - db-neo4j
                        - db-mongo
                        - django-app (fastapi django backend based on openapi)
                        """)
    args, unknown = parser.parse_known_args(sys.argv[1:])

    if unknown:
        print('There are unknown args. Make sure to call the script with the accepted args. Try --help')
        print(f'unknown: {unknown}')
        exit(1)

    try:
        match = name_pattern.match(args.name)
        if not match:
            print("Invalid application name")
            print(
                f"Application name must start and end with lowercased alphabetical characters and may contain '-' as separator. Used expression: '{name_pattern.pattern}'")
            exit(1)
    except re.error:
        print("Invalid regex")
        exit(1)

    app_path = os.path.join(APPLICATIONS_SRC_PATH, args.name)
    os.makedirs(app_path, exist_ok=True)
    templates = args.templates

    if "django-app" in args.templates and "webapp" not in templates:
        templates = ["base", "webapp"] + templates

    if 'webapp' in templates:
        if os.path.exists(os.path.join(app_path, 'frontend')):
            shutil.rmtree(os.path.join(app_path, 'frontend'))
        cmd = ["yarn", "create", "vite", args.name, "--template", "react-ts"]
        logging.info(f"Running command: {' '.join(cmd)}")
        subprocess.run(cmd, cwd=app_path)
        shutil.move(os.path.join(app_path, args.name), os.path.join(app_path, 'frontend'))
        generate_ts_client(openapi_file=os.path.join(app_path, 'api/openapi.yaml'))

    if 'server' in templates:
        with tempfile.TemporaryDirectory() as tmp_dirname:
            copymergedir(os.path.join(CH_ROOT, APPLICATION_TEMPLATE_PATH, template_name), tmp_dirname)
            merge_configuration_directories(app_path, tmp_dirname)
            generate_server(app_path, tmp_dirname)

    for template_name in templates:
        for base_path in (CH_ROOT, os.getcwd()):
            template_path = os.path.join(base_path, APPLICATION_TEMPLATE_PATH, template_name)
            if os.path.exists(template_path):
                merge_configuration_directories(template_path, app_path)

    if "flask-server" in templates:
        generate_server(app_path)

    replace_in_file(os.path.join(app_path, 'api/config.json'), PLACEHOLDER, to_python_module(args.name))

    if "django-app" in templates:
        replace_in_file(os.path.join(app_path, 'api/templates/main.jinja2'), PLACEHOLDER, to_python_module(args.name))
        generate_fastapi_server(app_path)
        replace_in_file(
            os.path.join(app_path, 'deploy/values.yaml'),
            f"{PLACEHOLDER}:{PLACEHOLDER}",
            f"{to_python_module(args.name)}:{to_python_module(args.name)}"
        )
        try:
            os.remove(os.path.join(app_path, 'backend', "__APP_NAME__", "__main__.py"))
        except FileNotFoundError:
            # backend dockerfile not found, continue
            pass

    replaceindir(app_path, PLACEHOLDER, args.name)

    if 'webapp' in templates:
        try:
            os.remove(os.path.join(app_path, 'backend', 'Dockerfile'))
        except FileNotFoundError:
            # backend dockerfile not found, continue
            pass
