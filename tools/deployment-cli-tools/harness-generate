#!/usr/bin/env python

import glob
import os
import shutil
import sys
import logging

from ch_cli_tools.openapi import LIB_NAME, generate_python_client, generate_server, generate_fastapi_server, \
    get_dependencies, generate_ts_client, generate_model
from ch_cli_tools.utils import copymergedir

HERE = os.path.dirname(os.path.realpath(__file__))
ROOT = os.path.dirname(HERE)


def get_openapi_file_paths(root_path):
    return [path for path in glob.glob(root_path + '/applications/*/api/*.yaml')]


def get_application_paths(openapi_files):
    return [os.path.basename(os.path.dirname(os.path.dirname(path))) for path in openapi_files]


def generate_servers(root_path, interactive=False, server=None):
    """
    Generates server stubs
    """
    openapi_files = get_openapi_file_paths(root_path)
    modules = get_application_paths(openapi_files)
    for i in range(len(modules)):
        if not interactive or input("Do you want to generate " + openapi_files[i] + "? [Y/n]").upper() != 'N':
            openapi_file = openapi_files[i]
            application_root = os.path.dirname(os.path.dirname(openapi_file))
            appname = os.path.basename(application_root)
            if server and server != appname:
                continue
            if os.path.exists(os.path.join(application_root, "api", "genapi.sh")):
                # fastapi server --> use the genapi.sh script
                generate_fastapi_server(application_root)
            else:
                generate_server(application_root)


def aggregate_packages(client_src_path, lib_name=LIB_NAME):
    DOCS_PATH = os.path.join(client_src_path, 'docs')
    TEST_PATH = os.path.join(client_src_path, 'test')
    README = os.path.join(client_src_path, 'README.md')
    REQUIREMENTS = os.path.join(client_src_path, 'requirements.txt')
    TEST_REQUIREMENTS = os.path.join(client_src_path, 'test-requirements.txt')

    if not os.path.exists(DOCS_PATH):
        os.makedirs(DOCS_PATH)
    if not os.path.exists(TEST_PATH):
        os.makedirs(TEST_PATH)
    if os.path.exists(README):
        os.remove(README)
    if os.path.exists(REQUIREMENTS):
        os.remove(REQUIREMENTS)
    if os.path.exists(TEST_REQUIREMENTS):
        os.remove(TEST_REQUIREMENTS)

    req_lines_seen = set()
    test_req_lines_seen = set()

    for MODULE_TMP_PATH in glob.glob(client_src_path + '/tmp-*'):
        module = MODULE_TMP_PATH.split(
            f'{lib_name}/tmp-')[-1].replace('-', '_')

        # Moves package

        code_dest_dir = os.path.join(client_src_path, lib_name, module)
        copymergedir(os.path.join(MODULE_TMP_PATH,
                     lib_name, module), code_dest_dir)
        copymergedir(f"{MODULE_TMP_PATH}/{lib_name}.{module}",
                     code_dest_dir)  # Fixes a a bug with nested packages

        # Adds Docs
        module_doc_path = os.path.join(DOCS_PATH, module)
        if not os.path.exists(module_doc_path):
            os.mkdir(module_doc_path)
        copymergedir(f"{client_src_path}/tmp-{module}/docs", module_doc_path)

        # Adds Tests
        module_test_path = os.path.join(client_src_path, 'test', module)
        copymergedir(os.path.join(MODULE_TMP_PATH, 'test'), module_test_path)

        # Merges Readme
        readme_file = f"{MODULE_TMP_PATH}/README.md"
        if not os.path.exists(readme_file):
            logging.warning("Readme file not found: %s.", readme_file)
            continue
        with open(README, 'a+') as outfile:
            with open(readme_file) as infile:
                filedata = infile.read()
                fd = filedata.replace('docs/', f'docs/{module}/')
                outfile.write(fd)

        # Merges Requirements
        # FIXME: Different package versions will remain in the output file

        requirements_file = f"{MODULE_TMP_PATH}/requirements.txt"
        outfile = open(REQUIREMENTS, "a+")
        for line in open(requirements_file, "r"):
            if line not in req_lines_seen:
                outfile.write(line)
                req_lines_seen.add(line)
        outfile.close()

        # Merges Test Requirements
        # FIXME: Different package versions will remain in the output file
        test_requirements_file = f"{MODULE_TMP_PATH}/test-requirements.txt"
        outfile = open(TEST_REQUIREMENTS, "a+")
        for line in open(test_requirements_file, "r"):
            if line not in test_req_lines_seen:
                outfile.write(line)
                test_req_lines_seen.add(line)
        outfile.close()

        # Removes Tmp Files
        shutil.rmtree(MODULE_TMP_PATH)


def generate_clients(root_path, client_lib_name=LIB_NAME, interactive=False):
    """
    Generates client stubs
    """
    if interactive and input("Do you want to generate client libraries? [Y/n]").upper() == 'N':
        return

    openapi_files = get_openapi_file_paths(root_path)
    applications = get_application_paths(openapi_files)

    client_src_path = os.path.join(
        root_path, 'libraries/client', client_lib_name)
    for i in range(len(applications)):
        app_name = applications[i]
        openapi_file = openapi_files[i]
        app_dir = os.path.dirname(os.path.dirname(openapi_file))
        generate_python_client(app_name, openapi_file,
                               client_src_path, lib_name=client_lib_name)
        if os.path.exists(os.path.join(app_dir, 'frontend')):
            generate_ts_client(openapi_file)

    aggregate_packages(client_src_path, client_lib_name)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description='Walk filesystem inside ./applications create application scaffolding.')
    parser.add_argument('path', metavar='path', default=ROOT, type=str,
                        help='Base path of the application.')
    parser.add_argument('-cn', '--client-name', dest='client_name', action="store", default=LIB_NAME,
                        help='Specify image registry prefix')
    parser.add_argument('-i', '--interactive', dest='interactive', action="store_true",
                        help='Asks before generate')
    parser.add_argument('-s', '--server', dest='server', action="store",
                        help='Generate only a specific server (provide application name) stubs', default=())
    parser.add_argument('-c', '--clients', dest='clients', action="store_true",
                        help='Generate only client libraries')
    parser.add_argument('-m', '--models', dest='models', action="store_true",
                        help='Generate only model library')
    args, unknown = parser.parse_known_args(sys.argv[1:])

    root_path = os.path.join(os.getcwd(), args.path) if not os.path.isabs(
        args.path) else args.path

    get_dependencies()
    if args.models and os.path.exists(os.path.join(root_path, "libraries/models")) and (not args.interactive or input("Do you want to generate the main model? [Y/n]").upper() != 'N'):
        generate_model()
    if not (args.clients or args.models) or args.server:
        generate_servers(root_path, interactive=args.interactive, server=args.server)
    if not (args.server or args.models) or args.clients:
        generate_clients(root_path, args.client_name, interactive=args.interactive)
