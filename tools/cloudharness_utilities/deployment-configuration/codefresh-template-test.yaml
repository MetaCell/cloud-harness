version: '1.0'
stages:
  - prepare
  - build
  - unittest
  - deploy
  - qa
  - finish
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: prepare
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}'
    git: github
  post_main_clone:
    title: Post main clone
    type: parallel
    stage: prepare
    steps:
      - title: Cloning cloud-harness repository...
        type: git-clone
        stage: prepare
        repo: 'https://github.com/MetaCell/cloud-harness.git'
        revision: '${{CLOUDHARNESS_BRANCH}}'
        working_directory: .
        git: github
    when:
      condition:
        all:
          whenVarExists: 'includes("${{CLOUDHARNESS_BRANCH}}", "${{CLOUDHARNESS_BRANCH}}") == false'
  prepare_deployment:
    title: "Prepare helm chart"
    image: python:3.9.10
    stage: prepare
    working_directory: .
    commands:
      - bash cloud-harness/install.sh
      - harness-deployment cloud-harness . -n test-${{CF_BUILD_ID}} -t ${{CF_BUILD_ID}} -d ${{DOMAIN}} -r ${{REGISTRY}} -rs ${{REGISTRY_SECRET}} -e $ENV
  prepare_deployment_view:
    commands:
      - 'helm template ./deployment/helm --debug -n test-${{CF_BUILD_ID}}'
    environment:
      - ACTION=auth
      - KUBE_CONTEXT=test-${{CF_BUILD_ID}}
    image: codefresh/cfstep-helm:3.6.2
    stage: prepare
    title: 'View helm chart'
  build_base_images:
    title: Build base images
    type: parallel
    stage: build
    steps: {}
  build_static_images:
    title: Build static images
    type: parallel
    stage: build
    steps: {}
  build_application_images:
    type: parallel
    stage: build
    steps: {}
  tests_unit:
    stage: unittest
    type: parallel
    steps: {}
  prepare_cluster:
    stage: build
    image: codefresh/kubectl
    commands:
    - kubectl config use-context ${{CLUSTER_NAME}}
    - kubectl create ns test-${{CF_BUILD_ID}}
  deployment:
    stage: deploy
    image: codefresh/cfstep-helm:3.6.2
    title: Installing chart
    fail_fast: false
    environment:
      - CHART_REF=./deployment/helm
      - RELEASE_NAME=test-${{CF_BUILD_ID}}
      - KUBE_CONTEXT=${{CLUSTER_NAME}}
      - NAMESPACE=test-${{CF_BUILD_ID}}
      - CHART_VERSION=${{CF_BUILD_ID}}
      - HELM_REPO_USE_HTTP=false
      - HELM_REPO_CONTEXT_PATH=
      - TIMEOUT=600s
      - VALUESFILE_values=./deployment/helm/values.yaml
  tests_api:
    stage: qa
    type: parallel
    steps: {}

  wait_e2e:
    stage: qa
    image: codefresh/kubectl
    fail_fast: false
    commands:
    - kubectl config get-contexts
    - kubectl config use-context ${{CLUSTER_NAME}}
    - kubectl -n test-${{CF_BUILD_ID}} rollout status deployment/samples
  tests_e2e:
    stage: qa
    type: parallel
    fail_fast: false
    steps: {}
  publish: null
  rollback:
    stage: finish
    image: codefresh/kubectl
    commands:
    - kubectl config use-context ${{CLUSTER_NAME}}
    - kubectl delete ns test-${{CF_BUILD_ID}}