apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  serviceName: broker
  template:
    metadata:
      annotations: null
      labels:
        app: kafka
    spec:
      serviceAccountName: kafka
      containers:
      - command:
        - ./bin/kafka-server-start.sh
        - /etc/kafka/server.properties
        - --override
        - default.replication.factor=1
        - --override
        - min.insync.replicas=1
        - --override
        - offsets.topic.replication.factor=1
        - --override
        - offsets.topic.num.partitions=1
        env:
        - name: CLASSPATH
          value: /opt/kafka/libs/extensions/*
        - name: KAFKA_LOG4J_OPTS
          value: -Dlog4j.configuration=file:/etc/kafka/log4j.properties
        - name: JMX_PORT
          value: "5555"
        image: solsson/kafka:2.3.0@sha256:b59603a8c0645f792fb54e9571500e975206352a021d6a116b110945ca6c3a1d
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -ce
              - kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done
        name: broker
        ports:
        - containerPort: 9092
          name: inside
        - containerPort: 9094
          name: outside
        - containerPort: 5555
          name: jmx
        readinessProbe:
          tcpSocket:
            port: 9092
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 600Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - mountPath: /etc/kafka
          name: config
        - mountPath: /var/lib/kafka/data
          name: data
        - mountPath: /opt/kafka/libs/extensions
          name: extensions
      initContainers:
      - command:
        - /bin/bash
        - /etc/kafka-configmap/init.sh
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: solsson/kafka-initutils@sha256:f6d9850c6c3ad5ecc35e717308fddb47daffbde18eb93e98e031128fe8b899ef
        name: init-config
        volumeMounts:
        - mountPath: /etc/kafka-configmap
          name: configmap
        - mountPath: /etc/kafka
          name: config
        - mountPath: /opt/kafka/libs/extensions
          name: extensions
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: broker-config
        name: configmap
      - emptyDir: {}
        name: config
      - emptyDir: {}
        name: extensions
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pzoo
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
      storage: persistent
  serviceName: pzoo
  template:
    metadata:
      annotations: null
      labels:
        app: zookeeper
        storage: persistent
    spec:
      serviceAccountName: kafka
      containers:
      - command:
        - ./bin/zookeeper-server-start.sh
        - /etc/kafka/zookeeper.properties
        env:
        - name: KAFKA_LOG4J_OPTS
          value: -Dlog4j.configuration=file:/etc/kafka/log4j.properties
        image: solsson/kafka:2.3.0@sha256:b59603a8c0645f792fb54e9571500e975206352a021d6a116b110945ca6c3a1d
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -ce
              - kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done
        name: zookeeper
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: peer
        - containerPort: 3888
          name: leader-election
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - '[ "imok" = "$(echo ruok | nc -w 1 -q 1 127.0.0.1 2181)" ]'
        resources:
          limits:
            memory: 120Mi
          requests:
            cpu: 10m
            memory: 100Mi
        volumeMounts:
        - mountPath: /etc/kafka
          name: config
        - mountPath: /var/lib/zookeeper
          name: data
      initContainers:
      - command:
        - /bin/bash
        - /etc/kafka-configmap/init.sh
        env:
        - name: PZOO_REPLICAS
          value: "1"
        - name: ZOO_REPLICAS
          value: "0"
        image: solsson/kafka-initutils@sha256:f6d9850c6c3ad5ecc35e717308fddb47daffbde18eb93e98e031128fe8b899ef
        name: init-config
        volumeMounts:
        - mountPath: /etc/kafka-configmap
          name: configmap
        - mountPath: /etc/kafka
          name: config
        - mountPath: /var/lib/zookeeper
          name: data
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: zookeeper-config
        name: configmap
      - emptyDir: {}
        name: config
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zoo
spec:
  podManagementPolicy: Parallel
  replicas: 0
  selector:
    matchLabels:
      app: zookeeper
      storage: persistent-regional
  serviceName: zoo
  template:
    metadata:
      annotations: null
      labels:
        app: zookeeper
        storage: persistent-regional
    spec:
      serviceAccountName: kafka
      containers:
      - command:
        - ./bin/zookeeper-server-start.sh
        - /etc/kafka/zookeeper.properties
        env:
        - name: KAFKA_LOG4J_OPTS
          value: -Dlog4j.configuration=file:/etc/kafka/log4j.properties
        image: solsson/kafka:2.3.0@sha256:b59603a8c0645f792fb54e9571500e975206352a021d6a116b110945ca6c3a1d
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -ce
              - kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done
        name: zookeeper
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: peer
        - containerPort: 3888
          name: leader-election
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - '[ "imok" = "$(echo ruok | nc -w 1 -q 1 127.0.0.1 2181)" ]'
        resources:
          limits:
            memory: 120Mi
          requests:
            cpu: 10m
            memory: 100Mi
        volumeMounts:
        - mountPath: /etc/kafka
          name: config
        - mountPath: /var/lib/zookeeper
          name: data
      initContainers:
      - command:
        - /bin/bash
        - /etc/kafka-configmap/init.sh
        env:
        - name: PZOO_REPLICAS
          value: "1"
        - name: ZOO_REPLICAS
          value: "0"
        - name: ID_OFFSET
          value: "2"
        image: solsson/kafka-initutils@sha256:f6d9850c6c3ad5ecc35e717308fddb47daffbde18eb93e98e031128fe8b899ef
        name: init-config
        volumeMounts:
        - mountPath: /etc/kafka-configmap
          name: configmap
        - mountPath: /etc/kafka
          name: config
        - mountPath: /var/lib/zookeeper
          name: data
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: zookeeper-config
        name: configmap
      - emptyDir: {}
        name: config
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.apps.events.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.apps.events.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.apps.events.name }}
    spec:
      containers:
      - name: kafka-manager
        image: solsson/kafka-manager@sha256:9da595ecbb733074a1d3c6091a1e0c384da4f4e1f19f4e16276062278da8e592
        ports:
        - containerPort: 80
        env:
        - name: ZK_HOSTS
          value: zookeeper.{{ .Values.namespace }}:2181
        command:
        - ./bin/kafka-manager
        - -Dhttp.port=80