/* tslint:disable */
/* eslint-disable */
/**
 * CloudHarness Sample API
 * CloudHarness Sample api
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: cloudharness@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SampleResource,
} from '../models/index';
import {
    SampleResourceFromJSON,
    SampleResourceToJSON,
} from '../models/index';

export interface CreateSampleResourceRequest {
    sampleResource: SampleResource;
}

export interface DeleteSampleResourceRequest {
    sampleresourceId: string;
}

export interface GetSampleResourceRequest {
    sampleresourceId: string;
}

export interface UpdateSampleResourceRequest {
    sampleresourceId: string;
    sampleResource: SampleResource;
}

/**
 * 
 */
export class ResourceApi extends runtime.BaseAPI {

    /**
     * Creates a new instance of a `SampleResource`.
     * Create a SampleResource
     */
    async createSampleResourceRaw(requestParameters: CreateSampleResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sampleResource'] == null) {
            throw new runtime.RequiredError(
                'sampleResource',
                'Required parameter "sampleResource" was null or undefined when calling createSampleResource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sampleresources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SampleResourceToJSON(requestParameters['sampleResource']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new instance of a `SampleResource`.
     * Create a SampleResource
     */
    async createSampleResource(requestParameters: CreateSampleResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createSampleResourceRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes an existing `SampleResource`.
     * Delete a SampleResource
     */
    async deleteSampleResourceRaw(requestParameters: DeleteSampleResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sampleresourceId'] == null) {
            throw new runtime.RequiredError(
                'sampleresourceId',
                'Required parameter "sampleresourceId" was null or undefined when calling deleteSampleResource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sampleresources/{sampleresourceId}`.replace(`{${"sampleresourceId"}}`, encodeURIComponent(String(requestParameters['sampleresourceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing `SampleResource`.
     * Delete a SampleResource
     */
    async deleteSampleResource(requestParameters: DeleteSampleResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSampleResourceRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the details of a single instance of a `SampleResource`.
     * Get a SampleResource
     */
    async getSampleResourceRaw(requestParameters: GetSampleResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SampleResource>> {
        if (requestParameters['sampleresourceId'] == null) {
            throw new runtime.RequiredError(
                'sampleresourceId',
                'Required parameter "sampleresourceId" was null or undefined when calling getSampleResource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sampleresources/{sampleresourceId}`.replace(`{${"sampleresourceId"}}`, encodeURIComponent(String(requestParameters['sampleresourceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SampleResourceFromJSON(jsonValue));
    }

    /**
     * Gets the details of a single instance of a `SampleResource`.
     * Get a SampleResource
     */
    async getSampleResource(requestParameters: GetSampleResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SampleResource> {
        const response = await this.getSampleResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of all `SampleResource` entities.
     * List All SampleResources
     */
    async getSampleResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SampleResource>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sampleresources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SampleResourceFromJSON));
    }

    /**
     * Gets a list of all `SampleResource` entities.
     * List All SampleResources
     */
    async getSampleResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SampleResource>> {
        const response = await this.getSampleResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing `SampleResource`.
     * Update a SampleResource
     */
    async updateSampleResourceRaw(requestParameters: UpdateSampleResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sampleresourceId'] == null) {
            throw new runtime.RequiredError(
                'sampleresourceId',
                'Required parameter "sampleresourceId" was null or undefined when calling updateSampleResource().'
            );
        }

        if (requestParameters['sampleResource'] == null) {
            throw new runtime.RequiredError(
                'sampleResource',
                'Required parameter "sampleResource" was null or undefined when calling updateSampleResource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sampleresources/{sampleresourceId}`.replace(`{${"sampleresourceId"}}`, encodeURIComponent(String(requestParameters['sampleresourceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SampleResourceToJSON(requestParameters['sampleResource']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing `SampleResource`.
     * Update a SampleResource
     */
    async updateSampleResource(requestParameters: UpdateSampleResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSampleResourceRaw(requestParameters, initOverrides);
    }

}
