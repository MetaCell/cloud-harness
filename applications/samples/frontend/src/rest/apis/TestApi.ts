/* tslint:disable */
/* eslint-disable */
/**
 * CloudHarness Sample API
 * CloudHarness Sample api
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: cloudharness@metacell.us
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

/**
 * 
 */
export class TestApi extends runtime.BaseAPI {

    /**
     * test sentry is working
     * @deprecated
     */
    async errorRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/error`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * test sentry is working
     * @deprecated
     */
    async error(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.errorRaw(initOverrides);
        return await response.value();
    }

    /**
     * test the application is up
     */
    async pingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * test the application is up
     */
    async ping(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.pingRaw(initOverrides);
        return await response.value();
    }

}
