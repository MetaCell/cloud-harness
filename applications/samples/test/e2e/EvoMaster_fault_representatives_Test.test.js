const superagent = require("superagent");
const EM = require("evomaster-client-js").EMTestUtils;




/**
 * This file was automatically generated by EvoMaster on 2022-06-07T16:56:54.833736100+02:00[Europe/Berlin]
 * 
 * The generated test suite contains 1 tests
 * 
 * Covered targets: 11
 * 
 * Used time: 0h 1m 14s
 * 
 * Needed budget for current results: 100%
 * 
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */

const baseUrlOfSut = "http://samples.ch.local";


beforeAll( async () => {
});








test("test_0_with500", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/valid").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(401);
    expect(res_0.header["content-type"].startsWith("application/problem+json")).toBe(true);
    expect(res_0.body.detail).toBe("No authorization token provided");
    expect(res_0.body.status).toBe(401.0);
    expect(res_0.body.title).toBe("Unauthorized");
    expect(res_0.body.type).toBe("about:blank");
    
    const res_1 = await superagent
            .get(baseUrlOfSut + "/api/operation_async").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_1.status).toBe(202);
    expect(res_1.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_1.body.task.href).toBe("workflows.ch.local/operations/test-custom-connected-op-55bl9");
    expect(res_1.body.task.name).toBe("test-custom-connected-op-55bl9");
    
    const res_2 = await superagent
            .get(baseUrlOfSut + "/api/valid").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_2.status).toBe(401);
    expect(res_2.header["content-type"].startsWith("application/problem+json")).toBe(true);
    expect(res_2.body.detail).toBe("No authorization token provided");
    expect(res_2.body.status).toBe(401.0);
    expect(res_2.body.title).toBe("Unauthorized");
    expect(res_2.body.type).toBe("about:blank");
    
    const res_3 = await superagent
            .get(baseUrlOfSut + "/api/operation_sync_results?" + 
                "a=0.73254098178054&" + 
                "b=0.05222625006192794").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_3.status).toBe(200);
    expect(res_3.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_3.body.length).toBe(1);
    expect(res_3.body[0].result).toBe("0.7847672318424679");
    
    const res_4 = await superagent
            .get(baseUrlOfSut + "/api/operation_sync").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_4.status).toBe(200);
    expect(res_4.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_4.body.api_version).toBe(null);
    expect(res_4.body.kind).toBe(null);
    expect(res_4.body.metadata.annotations).toBe(null);
    expect(res_4.body.metadata.cluster_name).toBe(null);
    expect(res_4.body.metadata.creation_timestamp).toBe("2022-06-07T14:56:08+00:00");
    expect(res_4.body.metadata.deletion_grace_period_seconds).toBe(null);
    expect(res_4.body.metadata.deletion_timestamp).toBe(null);
    expect(res_4.body.metadata.finalizers).toBe(null);
    expect(res_4.body.metadata.generate_name).toBe("test-sync-op-");
    expect(res_4.body.metadata.generation).toBe(3.0);
    expect(res_4.body.metadata.labels.workflows.argoproj.io/completed).toBe("true");
    expect(res_4.body.metadata.labels.workflows.argoproj.io/creator).toBe("system-serviceaccount-ch-argo-ch-server");
    expect(res_4.body.metadata.labels.workflows.argoproj.io/phase).toBe("Succeeded");
    expect(res_4.body.metadata.managed_fields.length).toBe(2);
    expect(res_4.body.metadata.managed_fields[0].api_version).toBe("argoproj.io/v1alpha1");
    expect(res_4.body.metadata.managed_fields[0].fields_type).toBe("FieldsV1");
    expect(Object.keys(res_4.body.metadata.managed_fields[0].fields_v1.f:metadata.f:generateName).length).toBe(0);
    expect(Object.keys(res_4.body.metadata.managed_fields[0].fields_v1.f:metadata.f:labels..).length).toBe(0);
    expect(Object.keys(res_4.body.metadata.managed_fields[0].fields_v1.f:metadata.f:labels.f:workflows.argoproj.io/creator).length).toBe(0);
    expect(Object.keys(res_4.body.metadata.managed_fields[0].fields_v1.f:spec).length).toBe(0);
    expect(res_4.body.metadata.managed_fields[0].manager).toBe("argo");
    expect(res_4.body.metadata.managed_fields[0].operation).toBe("Update");
    expect(res_4.body.metadata.managed_fields[0].time).toBe("2022-06-07T14:56:08+00:00");
    expect(res_4.body.metadata.managed_fields[1].api_version).toBe("argoproj.io/v1alpha1");
    expect(res_4.body.metadata.managed_fields[1].fields_type).toBe("FieldsV1");
    expect(Object.keys(res_4.body.metadata.managed_fields[1].fields_v1.f:metadata.f:labels.f:workflows.argoproj.io/completed).length).toBe(0);
    expect(Object.keys(res_4.body.metadata.managed_fields[1].fields_v1.f:metadata.f:labels.f:workflows.argoproj.io/phase).length).toBe(0);
    expect(Object.keys(res_4.body.metadata.managed_fields[1].fields_v1.f:status).length).toBe(0);
    expect(res_4.body.metadata.managed_fields[1].manager).toBe("workflow-controller");
    expect(res_4.body.metadata.managed_fields[1].operation).toBe("Update");
    expect(res_4.body.metadata.managed_fields[1].time).toBe("2022-06-07T14:56:18+00:00");
    expect(res_4.body.metadata.name).toBe("test-sync-op-spnv2");
    expect(res_4.body.metadata.namespace).toBe("ch");
    expect(res_4.body.metadata.owner_references).toBe(null);
    expect(res_4.body.metadata.resource_version).toBe("2626954");
    expect(res_4.body.metadata.self_link).toBe(null);
    expect(res_4.body.metadata.uid).toBe("ed524445-7a1d-4d54-be08-31937f9049ea");
    expect(res_4.body.spec.active_deadline_seconds).toBe(null);
    expect(res_4.body.spec.affinity).toBe(null);
    expect(res_4.body.spec.arguments.artifacts).toBe(null);
    expect(res_4.body.spec.arguments.parameters).toBe(null);
    expect(res_4.body.spec.artifact_repository_ref).toBe(null);
    expect(res_4.body.spec.automount_service_account_token).toBe(null);
    expect(res_4.body.spec.dns_config).toBe(null);
    expect(res_4.body.spec.dns_policy).toBe(null);
    expect(res_4.body.spec.entrypoint).toBe("download-file");
    expect(res_4.body.spec.executor).toBe(null);
    expect(res_4.body.spec.host_aliases).toBe(null);
    expect(res_4.body.spec.host_network).toBe(null);
    expect(res_4.body.spec.image_pull_secrets.length).toBe(1);
    expect(res_4.body.spec.image_pull_secrets[0].name).toBe(null);
    expect(res_4.body.spec.metrics).toBe(null);
    expect(res_4.body.spec.node_selector).toBe(null);
    expect(res_4.body.spec.on_exit).toBe(null);
    expect(res_4.body.spec.parallelism).toBe(null);
    expect(res_4.body.spec.pod_disruption_budget).toBe(null);
    expect(res_4.body.spec.pod_gc).toBe(null);
    expect(res_4.body.spec.pod_priority).toBe(null);
    expect(res_4.body.spec.pod_priority_class_name).toBe(null);
    expect(res_4.body.spec.pod_spec_patch).toBe(null);
    expect(res_4.body.spec.priority).toBe(null);
    expect(res_4.body.spec.retry_strategy).toBe(null);
    expect(res_4.body.spec.scheduler_name).toBe(null);
    expect(res_4.body.spec.security_context).toBe(null);
    expect(res_4.body.spec.service_account_name).toBe("argo-workflows");
    expect(res_4.body.spec.shutdown).toBe(null);
    expect(res_4.body.spec.suspend).toBe(null);
    expect(res_4.body.spec.synchronization).toBe(null);
    expect(res_4.body.spec.templates.length).toBe(1);
    expect(res_4.body.spec.templates[0].affinity).toBe(null);
    expect(res_4.body.spec.templates[0].archive_location).toBe(null);
    expect(res_4.body.spec.templates[0].arguments).toBe(null);
    expect(res_4.body.spec.templates[0].automount_service_account_token).toBe(null);
    expect(res_4.body.spec.templates[0].container.args).toBe(null);
    expect(res_4.body.spec.templates[0].container.command).toBe(null);
    expect(res_4.body.spec.templates[0].container.env.length).toBe(24);
    expect(res_4.body.spec.templates[0].container.env[0].name).toBe("CH_IMAGE_TAG");
    expect(res_4.body.spec.templates[0].container.env[0].value).toBe("latest");
    expect(res_4.body.spec.templates[0].container.env[0].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[1].name).toBe("CH_SAMPLES_SUBDOMAIN");
    expect(res_4.body.spec.templates[0].container.env[1].value).toBe("samples");
    expect(res_4.body.spec.templates[0].container.env[1].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[2].name).toBe("CH_CHART_VERSION");
    expect(res_4.body.spec.templates[0].container.env[2].value).toBe("0.0.1");
    expect(res_4.body.spec.templates[0].container.env[2].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[3].name).toBe("CH_WORKFLOWS_SUBDOMAIN");
    expect(res_4.body.spec.templates[0].container.env[3].value).toBe("workflows");
    expect(res_4.body.spec.templates[0].container.env[3].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[4].name).toBe("CH_ACCOUNTS_NAME");
    expect(res_4.body.spec.templates[0].container.env[4].value).toBe("accounts");
    expect(res_4.body.spec.templates[0].container.env[4].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[5].name).toBe("CH_ACCOUNTS_REALM");
    expect(res_4.body.spec.templates[0].container.env[5].value).toBe("ch");
    expect(res_4.body.spec.templates[0].container.env[5].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[6].name).toBe("CH_ACCOUNTS_CLIENT_SECRET");
    expect(res_4.body.spec.templates[0].container.env[6].value).toBe("5678eb6e-9e2c-4ee5-bd54-34e7411339e8");
    expect(res_4.body.spec.templates[0].container.env[6].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[7].name).toBe("CH_EVENTS_SUBDOMAIN");
    expect(res_4.body.spec.templates[0].container.env[7].value).toBe("events");
    expect(res_4.body.spec.templates[0].container.env[7].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[8].name).toBe("CH_SAMPLES_PORT");
    expect(res_4.body.spec.templates[0].container.env[8].value).toBe("80");
    expect(res_4.body.spec.templates[0].container.env[8].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[9].name).toBe("CH_CURRENT_APP_NAME");
    expect(res_4.body.spec.templates[0].container.env[9].value).toBe("samples");
    expect(res_4.body.spec.templates[0].container.env[9].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[10].name).toBe("CH_ARGO_SUBDOMAIN");
    expect(res_4.body.spec.templates[0].container.env[10].value).toBe("argo");
    expect(res_4.body.spec.templates[0].container.env[10].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[11].name).toBe("CH_ACCOUNTS_SUBDOMAIN");
    expect(res_4.body.spec.templates[0].container.env[11].value).toBe("accounts");
    expect(res_4.body.spec.templates[0].container.env[11].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[12].name).toBe("CH_ACCOUNTS_CLIENT_ID");
    expect(res_4.body.spec.templates[0].container.env[12].value).toBe("rest-client");
    expect(res_4.body.spec.templates[0].container.env[12].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[13].name).toBe("CH_DOMAIN");
    expect(res_4.body.spec.templates[0].container.env[13].value).toBe("ch.local");
    expect(res_4.body.spec.templates[0].container.env[13].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[14].name).toBe("CH_ARGO_NAME");
    expect(res_4.body.spec.templates[0].container.env[14].value).toBe("argo");
    expect(res_4.body.spec.templates[0].container.env[14].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[15].name).toBe("CH_SAMPLES_NAME");
    expect(res_4.body.spec.templates[0].container.env[15].value).toBe("samples");
    expect(res_4.body.spec.templates[0].container.env[15].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[16].name).toBe("CH_SECRET");
    expect(res_4.body.spec.templates[0].container.env[16].value).toBe("\"In God we trust; all others must bring data. ― W. Edwards Deming\"");
    expect(res_4.body.spec.templates[0].container.env[16].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[17].name).toBe("CH_EVENTS_NAME");
    expect(res_4.body.spec.templates[0].container.env[17].value).toBe("events");
    expect(res_4.body.spec.templates[0].container.env[17].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[18].name).toBe("CH_IMAGE_REGISTRY");
    expect(res_4.body.spec.templates[0].container.env[18].value).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[18].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[19].name).toBe("CH_VERSION");
    expect(res_4.body.spec.templates[0].container.env[19].value).toBe("0.0.1");
    expect(res_4.body.spec.templates[0].container.env[19].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[20].name).toBe("CH_ACCOUNTS_AUTH_DOMAIN");
    expect(res_4.body.spec.templates[0].container.env[20].value).toBe("accounts.ch.local");
    expect(res_4.body.spec.templates[0].container.env[20].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[21].name).toBe("CH_WORKFLOWS_NAME");
    expect(res_4.body.spec.templates[0].container.env[21].value).toBe("workflows");
    expect(res_4.body.spec.templates[0].container.env[21].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[22].name).toBe("url");
    expect(res_4.body.spec.templates[0].container.env[22].value).toBe("https://github.com/MetaCell/cloud-harness/blob/master/README.md");
    expect(res_4.body.spec.templates[0].container.env[22].value_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[23].name).toBe("CH_WORKFLOW_NAME");
    expect(res_4.body.spec.templates[0].container.env[23].value).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[23].value_from.config_map_key_ref).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[23].value_from.field_ref.api_version).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[23].value_from.field_ref.field_path).toBe("metadata.name");
    expect(res_4.body.spec.templates[0].container.env[23].value_from.resource_field_ref).toBe(null);
    expect(res_4.body.spec.templates[0].container.env[23].value_from.secret_key_ref).toBe(null);
    expect(res_4.body.spec.templates[0].container.env_from).toBe(null);
    expect(res_4.body.spec.templates[0].container.image_pull_policy).toBe("IfNotPresent");
    expect(res_4.body.spec.templates[0].container.lifecycle).toBe(null);
    expect(res_4.body.spec.templates[0].container.liveness_probe).toBe(null);
    expect(res_4.body.spec.templates[0].container.name).toBe("");
    expect(res_4.body.spec.templates[0].container.ports).toBe(null);
    expect(res_4.body.spec.templates[0].container.readiness_probe).toBe(null);
    expect(res_4.body.spec.templates[0].container.resources.limits).toBe(null);
    expect(res_4.body.spec.templates[0].container.resources.requests).toBe(null);
    expect(res_4.body.spec.templates[0].container.security_context).toBe(null);
    expect(res_4.body.spec.templates[0].container.startup_probe).toBe(null);
    expect(res_4.body.spec.templates[0].container.stdin).toBe(null);
    expect(res_4.body.spec.templates[0].container.stdin_once).toBe(null);
    expect(res_4.body.spec.templates[0].container.termination_message_path).toBe(null);
    expect(res_4.body.spec.templates[0].container.termination_message_policy).toBe(null);
    expect(res_4.body.spec.templates[0].container.tty).toBe(null);
    expect(res_4.body.spec.templates[0].container.volume_devices).toBe(null);
    expect(res_4.body.spec.templates[0].container.volume_mounts.length).toBe(1);
    expect(res_4.body.spec.templates[0].container.volume_mounts[0].mount_path).toBe("/opt/cloudharness/resources/allvalues.yaml");
    expect(res_4.body.spec.templates[0].container.volume_mounts[0].mount_propagation).toBe(null);
    expect(res_4.body.spec.templates[0].container.volume_mounts[0].name).toBe("cloudharness-allvalues");
    expect(res_4.body.spec.templates[0].container.volume_mounts[0].read_only).toBe(null);
    expect(res_4.body.spec.templates[0].container.volume_mounts[0].sub_path).toBe("allvalues.yaml");
    expect(res_4.body.spec.templates[0].container.volume_mounts[0].sub_path_expr).toBe(null);
    expect(res_4.body.spec.templates[0].container.working_dir).toBe(null);
    expect(res_4.body.spec.templates[0].daemon).toBe(null);
    expect(res_4.body.spec.templates[0].dag).toBe(null);
    expect(res_4.body.spec.templates[0].executor).toBe(null);
    expect(res_4.body.spec.templates[0].host_aliases).toBe(null);
    expect(res_4.body.spec.templates[0].init_containers).toBe(null);
    expect(res_4.body.spec.templates[0].inputs.artifacts).toBe(null);
    expect(res_4.body.spec.templates[0].inputs.parameters).toBe(null);
    expect(res_4.body.spec.templates[0].memoize).toBe(null);
    expect(res_4.body.spec.templates[0].metadata.annotations).toBe(null);
    expect(res_4.body.spec.templates[0].metadata.labels).toBe(null);
    expect(res_4.body.spec.templates[0].metrics).toBe(null);
    expect(res_4.body.spec.templates[0].name).toBe("download-file");
    expect(res_4.body.spec.templates[0].node_selector).toBe(null);
    expect(res_4.body.spec.templates[0].outputs.artifacts).toBe(null);
    expect(res_4.body.spec.templates[0].outputs.exit_code).toBe(null);
    expect(res_4.body.spec.templates[0].outputs.parameters).toBe(null);
    expect(res_4.body.spec.templates[0].outputs.result).toBe(null);
    expect(res_4.body.spec.templates[0].parallelism).toBe(null);
    expect(res_4.body.spec.templates[0].pod_spec_patch).toBe(null);
    expect(res_4.body.spec.templates[0].priority).toBe(null);
    expect(res_4.body.spec.templates[0].priority_class_name).toBe(null);
    expect(res_4.body.spec.templates[0].resource).toBe(null);
    expect(res_4.body.spec.templates[0].retry_strategy).toBe(null);
    expect(res_4.body.spec.templates[0].scheduler_name).toBe(null);
    expect(res_4.body.spec.templates[0].script).toBe(null);
    expect(res_4.body.spec.templates[0].security_context).toBe(null);
    expect(res_4.body.spec.templates[0].service_account_name).toBe(null);
    expect(res_4.body.spec.templates[0].sidecars).toBe(null);
    expect(res_4.body.spec.templates[0].steps).toBe(null);
    expect(res_4.body.spec.templates[0].suspend).toBe(null);
    expect(res_4.body.spec.templates[0].synchronization).toBe(null);
    expect(res_4.body.spec.templates[0].template).toBe(null);
    expect(res_4.body.spec.templates[0].template_ref).toBe(null);
    expect(res_4.body.spec.templates[0].timeout).toBe(null);
    expect(res_4.body.spec.templates[0].tolerations).toBe(null);
    expect(res_4.body.spec.templates[0].volumes).toBe(null);
    expect(res_4.body.spec.tolerations).toBe(null);
    expect(res_4.body.spec.ttl_seconds_after_finished).toBe(null);
    expect(res_4.body.spec.ttl_strategy.seconds_after_completion).toBe(3600.0);
    expect(res_4.body.spec.ttl_strategy.seconds_after_failure).toBe(7200.0);
    expect(res_4.body.spec.ttl_strategy.seconds_after_success).toBe(1200.0);
    expect(res_4.body.spec.volume_claim_gc).toBe(null);
    expect(res_4.body.spec.volume_claim_templates).toBe(null);
    expect(res_4.body.spec.volumes.length).toBe(1);
    expect(res_4.body.spec.volumes[0].aws_elastic_block_store).toBe(null);
    expect(res_4.body.spec.volumes[0].azure_disk).toBe(null);
    expect(res_4.body.spec.volumes[0].azure_file).toBe(null);
    expect(res_4.body.spec.volumes[0].cephfs).toBe(null);
    expect(res_4.body.spec.volumes[0].cinder).toBe(null);
    expect(res_4.body.spec.volumes[0].config_map.default_mode).toBe(null);
    expect(res_4.body.spec.volumes[0].config_map.items).toBe(null);
    expect(res_4.body.spec.volumes[0].config_map.name).toBe("cloudharness-allvalues");
    expect(res_4.body.spec.volumes[0].config_map.optional).toBe(null);
    expect(res_4.body.spec.volumes[0].csi).toBe(null);
    expect(res_4.body.spec.volumes[0].downward_api).toBe(null);
    expect(res_4.body.spec.volumes[0].empty_dir).toBe(null);
    expect(res_4.body.spec.volumes[0].fc).toBe(null);
    expect(res_4.body.spec.volumes[0].flex_volume).toBe(null);
    expect(res_4.body.spec.volumes[0].flocker).toBe(null);
    expect(res_4.body.spec.volumes[0].gce_persistent_disk).toBe(null);
    expect(res_4.body.spec.volumes[0].git_repo).toBe(null);
    expect(res_4.body.spec.volumes[0].glusterfs).toBe(null);
    expect(res_4.body.spec.volumes[0].host_path).toBe(null);
    expect(res_4.body.spec.volumes[0].iscsi).toBe(null);
    expect(res_4.body.spec.volumes[0].name).toBe("cloudharness-allvalues");
    expect(res_4.body.spec.volumes[0].nfs).toBe(null);
    expect(res_4.body.spec.volumes[0].persistent_volume_claim).toBe(null);
    expect(res_4.body.spec.volumes[0].photon_persistent_disk).toBe(null);
    expect(res_4.body.spec.volumes[0].portworx_volume).toBe(null);
    expect(res_4.body.spec.volumes[0].projected).toBe(null);
    expect(res_4.body.spec.volumes[0].quobyte).toBe(null);
    expect(res_4.body.spec.volumes[0].rbd).toBe(null);
    expect(res_4.body.spec.volumes[0].scale_io).toBe(null);
    expect(res_4.body.spec.volumes[0].secret).toBe(null);
    expect(res_4.body.spec.volumes[0].storageos).toBe(null);
    expect(res_4.body.spec.volumes[0].vsphere_volume).toBe(null);
    expect(res_4.body.spec.workflow_template_ref).toBe(null);
    expect(res_4.body.status.compressed_nodes).toBe(null);
    expect(res_4.body.status.conditions.length).toBe(2);
    expect(res_4.body.status.conditions[0].message).toBe(null);
    expect(res_4.body.status.conditions[0].status).toBe("False");
    expect(res_4.body.status.conditions[0].type).toBe("PodRunning");
    expect(res_4.body.status.conditions[1].message).toBe(null);
    expect(res_4.body.status.conditions[1].status).toBe("True");
    expect(res_4.body.status.conditions[1].type).toBe("Completed");
    expect(res_4.body.status.estimated_duration).toBe(null);
    expect(res_4.body.status.finished_at).toBe("2022-06-07T14:56:18+00:00");
    expect(res_4.body.status.message).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.boundary_id).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.children).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.daemoned).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.display_name).toBe("test-sync-op-spnv2");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.estimated_duration).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.finished_at).toBe("2022-06-07T14:56:10+00:00");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.host_node_name).toBe("docker-desktop");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.inputs).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.memoization_status).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.message).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.name).toBe("test-sync-op-spnv2");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.outbound_nodes).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.outputs.artifacts).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.outputs.exit_code).toBe("0");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.outputs.parameters).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.outputs.result).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.phase).toBe("Succeeded");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.pod_ip).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.progress).toBe("1/1");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.resources_duration.cpu).toBe(2.0);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.resources_duration.memory).toBe(2.0);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.started_at).toBe("2022-06-07T14:56:08+00:00");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.stored_template_id).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.synchronization_status).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.template_name).toBe("download-file");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.template_ref).toBe(null);
    expect(res_4.body.status.nodes.test-sync-op-spnv2.template_scope).toBe("local/test-sync-op-spnv2");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.type).toBe("Pod");
    expect(res_4.body.status.nodes.test-sync-op-spnv2.workflow_template_name).toBe(null);
    expect(res_4.body.status.offload_node_status_version).toBe(null);
    expect(res_4.body.status.outputs).toBe(null);
    expect(res_4.body.status.persistent_volume_claims).toBe(null);
    expect(res_4.body.status.phase).toBe("Succeeded");
    expect(res_4.body.status.progress).toBe("1/1");
    expect(res_4.body.status.resources_duration.cpu).toBe(2.0);
    expect(res_4.body.status.resources_duration.memory).toBe(2.0);
    expect(res_4.body.status.started_at).toBe("2022-06-07T14:56:08+00:00");
    expect(res_4.body.status.stored_templates).toBe(null);
    expect(res_4.body.status.stored_workflow_template_spec).toBe(null);
    expect(res_4.body.status.synchronization).toBe(null);
    
    const res_5 = await superagent
            .get(baseUrlOfSut + "/api/error").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_5.status).toBe(500);
    expect(res_5.header["content-type"].startsWith("text/html")).toBe(true);
    
    const res_6 = await superagent
            .get(baseUrlOfSut + "/api/operation_sync").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_6.status).toBe(200);
    expect(res_6.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_6.body.api_version).toBe(null);
    expect(res_6.body.kind).toBe(null);
    expect(res_6.body.metadata.annotations).toBe(null);
    expect(res_6.body.metadata.cluster_name).toBe(null);
    expect(res_6.body.metadata.creation_timestamp).toBe("2022-06-07T14:56:19+00:00");
    expect(res_6.body.metadata.deletion_grace_period_seconds).toBe(null);
    expect(res_6.body.metadata.deletion_timestamp).toBe(null);
    expect(res_6.body.metadata.finalizers).toBe(null);
    expect(res_6.body.metadata.generate_name).toBe("test-sync-op-");
    expect(res_6.body.metadata.generation).toBe(3.0);
    expect(res_6.body.metadata.labels.workflows.argoproj.io/completed).toBe("true");
    expect(res_6.body.metadata.labels.workflows.argoproj.io/creator).toBe("system-serviceaccount-ch-argo-ch-server");
    expect(res_6.body.metadata.labels.workflows.argoproj.io/phase).toBe("Succeeded");
    expect(res_6.body.metadata.managed_fields.length).toBe(2);
    expect(res_6.body.metadata.managed_fields[0].api_version).toBe("argoproj.io/v1alpha1");
    expect(res_6.body.metadata.managed_fields[0].fields_type).toBe("FieldsV1");
    expect(Object.keys(res_6.body.metadata.managed_fields[0].fields_v1.f:metadata.f:generateName).length).toBe(0);
    expect(Object.keys(res_6.body.metadata.managed_fields[0].fields_v1.f:metadata.f:labels..).length).toBe(0);
    expect(Object.keys(res_6.body.metadata.managed_fields[0].fields_v1.f:metadata.f:labels.f:workflows.argoproj.io/creator).length).toBe(0);
    expect(Object.keys(res_6.body.metadata.managed_fields[0].fields_v1.f:spec).length).toBe(0);
    expect(res_6.body.metadata.managed_fields[0].manager).toBe("argo");
    expect(res_6.body.metadata.managed_fields[0].operation).toBe("Update");
    expect(res_6.body.metadata.managed_fields[0].time).toBe("2022-06-07T14:56:19+00:00");
    expect(res_6.body.metadata.managed_fields[1].api_version).toBe("argoproj.io/v1alpha1");
    expect(res_6.body.metadata.managed_fields[1].fields_type).toBe("FieldsV1");
    expect(Object.keys(res_6.body.metadata.managed_fields[1].fields_v1.f:metadata.f:labels.f:workflows.argoproj.io/completed).length).toBe(0);
    expect(Object.keys(res_6.body.metadata.managed_fields[1].fields_v1.f:metadata.f:labels.f:workflows.argoproj.io/phase).length).toBe(0);
    expect(Object.keys(res_6.body.metadata.managed_fields[1].fields_v1.f:status).length).toBe(0);
    expect(res_6.body.metadata.managed_fields[1].manager).toBe("workflow-controller");
    expect(res_6.body.metadata.managed_fields[1].operation).toBe("Update");
    expect(res_6.body.metadata.managed_fields[1].time).toBe("2022-06-07T14:56:29+00:00");
    expect(res_6.body.metadata.name).toBe("test-sync-op-jnjrc");
    expect(res_6.body.metadata.namespace).toBe("ch");
    expect(res_6.body.metadata.owner_references).toBe(null);
    expect(res_6.body.metadata.resource_version).toBe("2626990");
    expect(res_6.body.metadata.self_link).toBe(null);
    expect(res_6.body.metadata.uid).toBe("f3baadb9-3ef6-4585-8d4a-f016bd09e829");
    expect(res_6.body.spec.active_deadline_seconds).toBe(null);
    expect(res_6.body.spec.affinity).toBe(null);
    expect(res_6.body.spec.arguments.artifacts).toBe(null);
    expect(res_6.body.spec.arguments.parameters).toBe(null);
    expect(res_6.body.spec.artifact_repository_ref).toBe(null);
    expect(res_6.body.spec.automount_service_account_token).toBe(null);
    expect(res_6.body.spec.dns_config).toBe(null);
    expect(res_6.body.spec.dns_policy).toBe(null);
    expect(res_6.body.spec.entrypoint).toBe("download-file");
    expect(res_6.body.spec.executor).toBe(null);
    expect(res_6.body.spec.host_aliases).toBe(null);
    expect(res_6.body.spec.host_network).toBe(null);
    expect(res_6.body.spec.image_pull_secrets.length).toBe(1);
    expect(res_6.body.spec.image_pull_secrets[0].name).toBe(null);
    expect(res_6.body.spec.metrics).toBe(null);
    expect(res_6.body.spec.node_selector).toBe(null);
    expect(res_6.body.spec.on_exit).toBe(null);
    expect(res_6.body.spec.parallelism).toBe(null);
    expect(res_6.body.spec.pod_disruption_budget).toBe(null);
    expect(res_6.body.spec.pod_gc).toBe(null);
    expect(res_6.body.spec.pod_priority).toBe(null);
    expect(res_6.body.spec.pod_priority_class_name).toBe(null);
    expect(res_6.body.spec.pod_spec_patch).toBe(null);
    expect(res_6.body.spec.priority).toBe(null);
    expect(res_6.body.spec.retry_strategy).toBe(null);
    expect(res_6.body.spec.scheduler_name).toBe(null);
    expect(res_6.body.spec.security_context).toBe(null);
    expect(res_6.body.spec.service_account_name).toBe("argo-workflows");
    expect(res_6.body.spec.shutdown).toBe(null);
    expect(res_6.body.spec.suspend).toBe(null);
    expect(res_6.body.spec.synchronization).toBe(null);
    expect(res_6.body.spec.templates.length).toBe(1);
    expect(res_6.body.spec.templates[0].affinity).toBe(null);
    expect(res_6.body.spec.templates[0].archive_location).toBe(null);
    expect(res_6.body.spec.templates[0].arguments).toBe(null);
    expect(res_6.body.spec.templates[0].automount_service_account_token).toBe(null);
    expect(res_6.body.spec.templates[0].container.args).toBe(null);
    expect(res_6.body.spec.templates[0].container.command).toBe(null);
    expect(res_6.body.spec.templates[0].container.env.length).toBe(24);
    expect(res_6.body.spec.templates[0].container.env[0].name).toBe("CH_IMAGE_TAG");
    expect(res_6.body.spec.templates[0].container.env[0].value).toBe("latest");
    expect(res_6.body.spec.templates[0].container.env[0].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[1].name).toBe("CH_SAMPLES_SUBDOMAIN");
    expect(res_6.body.spec.templates[0].container.env[1].value).toBe("samples");
    expect(res_6.body.spec.templates[0].container.env[1].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[2].name).toBe("CH_CHART_VERSION");
    expect(res_6.body.spec.templates[0].container.env[2].value).toBe("0.0.1");
    expect(res_6.body.spec.templates[0].container.env[2].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[3].name).toBe("CH_WORKFLOWS_SUBDOMAIN");
    expect(res_6.body.spec.templates[0].container.env[3].value).toBe("workflows");
    expect(res_6.body.spec.templates[0].container.env[3].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[4].name).toBe("CH_ACCOUNTS_NAME");
    expect(res_6.body.spec.templates[0].container.env[4].value).toBe("accounts");
    expect(res_6.body.spec.templates[0].container.env[4].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[5].name).toBe("CH_ACCOUNTS_REALM");
    expect(res_6.body.spec.templates[0].container.env[5].value).toBe("ch");
    expect(res_6.body.spec.templates[0].container.env[5].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[6].name).toBe("CH_ACCOUNTS_CLIENT_SECRET");
    expect(res_6.body.spec.templates[0].container.env[6].value).toBe("5678eb6e-9e2c-4ee5-bd54-34e7411339e8");
    expect(res_6.body.spec.templates[0].container.env[6].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[7].name).toBe("CH_EVENTS_SUBDOMAIN");
    expect(res_6.body.spec.templates[0].container.env[7].value).toBe("events");
    expect(res_6.body.spec.templates[0].container.env[7].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[8].name).toBe("CH_SAMPLES_PORT");
    expect(res_6.body.spec.templates[0].container.env[8].value).toBe("80");
    expect(res_6.body.spec.templates[0].container.env[8].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[9].name).toBe("CH_CURRENT_APP_NAME");
    expect(res_6.body.spec.templates[0].container.env[9].value).toBe("samples");
    expect(res_6.body.spec.templates[0].container.env[9].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[10].name).toBe("CH_ARGO_SUBDOMAIN");
    expect(res_6.body.spec.templates[0].container.env[10].value).toBe("argo");
    expect(res_6.body.spec.templates[0].container.env[10].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[11].name).toBe("CH_ACCOUNTS_SUBDOMAIN");
    expect(res_6.body.spec.templates[0].container.env[11].value).toBe("accounts");
    expect(res_6.body.spec.templates[0].container.env[11].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[12].name).toBe("CH_ACCOUNTS_CLIENT_ID");
    expect(res_6.body.spec.templates[0].container.env[12].value).toBe("rest-client");
    expect(res_6.body.spec.templates[0].container.env[12].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[13].name).toBe("CH_DOMAIN");
    expect(res_6.body.spec.templates[0].container.env[13].value).toBe("ch.local");
    expect(res_6.body.spec.templates[0].container.env[13].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[14].name).toBe("CH_ARGO_NAME");
    expect(res_6.body.spec.templates[0].container.env[14].value).toBe("argo");
    expect(res_6.body.spec.templates[0].container.env[14].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[15].name).toBe("CH_SAMPLES_NAME");
    expect(res_6.body.spec.templates[0].container.env[15].value).toBe("samples");
    expect(res_6.body.spec.templates[0].container.env[15].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[16].name).toBe("CH_SECRET");
    expect(res_6.body.spec.templates[0].container.env[16].value).toBe("\"In God we trust; all others must bring data. ― W. Edwards Deming\"");
    expect(res_6.body.spec.templates[0].container.env[16].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[17].name).toBe("CH_EVENTS_NAME");
    expect(res_6.body.spec.templates[0].container.env[17].value).toBe("events");
    expect(res_6.body.spec.templates[0].container.env[17].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[18].name).toBe("CH_IMAGE_REGISTRY");
    expect(res_6.body.spec.templates[0].container.env[18].value).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[18].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[19].name).toBe("CH_VERSION");
    expect(res_6.body.spec.templates[0].container.env[19].value).toBe("0.0.1");
    expect(res_6.body.spec.templates[0].container.env[19].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[20].name).toBe("CH_ACCOUNTS_AUTH_DOMAIN");
    expect(res_6.body.spec.templates[0].container.env[20].value).toBe("accounts.ch.local");
    expect(res_6.body.spec.templates[0].container.env[20].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[21].name).toBe("CH_WORKFLOWS_NAME");
    expect(res_6.body.spec.templates[0].container.env[21].value).toBe("workflows");
    expect(res_6.body.spec.templates[0].container.env[21].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[22].name).toBe("url");
    expect(res_6.body.spec.templates[0].container.env[22].value).toBe("https://github.com/MetaCell/cloud-harness/blob/master/README.md");
    expect(res_6.body.spec.templates[0].container.env[22].value_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[23].name).toBe("CH_WORKFLOW_NAME");
    expect(res_6.body.spec.templates[0].container.env[23].value).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[23].value_from.config_map_key_ref).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[23].value_from.field_ref.api_version).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[23].value_from.field_ref.field_path).toBe("metadata.name");
    expect(res_6.body.spec.templates[0].container.env[23].value_from.resource_field_ref).toBe(null);
    expect(res_6.body.spec.templates[0].container.env[23].value_from.secret_key_ref).toBe(null);
    expect(res_6.body.spec.templates[0].container.env_from).toBe(null);
    expect(res_6.body.spec.templates[0].container.image_pull_policy).toBe("IfNotPresent");
    expect(res_6.body.spec.templates[0].container.lifecycle).toBe(null);
    expect(res_6.body.spec.templates[0].container.liveness_probe).toBe(null);
    expect(res_6.body.spec.templates[0].container.name).toBe("");
    expect(res_6.body.spec.templates[0].container.ports).toBe(null);
    expect(res_6.body.spec.templates[0].container.readiness_probe).toBe(null);
    expect(res_6.body.spec.templates[0].container.resources.limits).toBe(null);
    expect(res_6.body.spec.templates[0].container.resources.requests).toBe(null);
    expect(res_6.body.spec.templates[0].container.security_context).toBe(null);
    expect(res_6.body.spec.templates[0].container.startup_probe).toBe(null);
    expect(res_6.body.spec.templates[0].container.stdin).toBe(null);
    expect(res_6.body.spec.templates[0].container.stdin_once).toBe(null);
    expect(res_6.body.spec.templates[0].container.termination_message_path).toBe(null);
    expect(res_6.body.spec.templates[0].container.termination_message_policy).toBe(null);
    expect(res_6.body.spec.templates[0].container.tty).toBe(null);
    expect(res_6.body.spec.templates[0].container.volume_devices).toBe(null);
    expect(res_6.body.spec.templates[0].container.volume_mounts.length).toBe(1);
    expect(res_6.body.spec.templates[0].container.volume_mounts[0].mount_path).toBe("/opt/cloudharness/resources/allvalues.yaml");
    expect(res_6.body.spec.templates[0].container.volume_mounts[0].mount_propagation).toBe(null);
    expect(res_6.body.spec.templates[0].container.volume_mounts[0].name).toBe("cloudharness-allvalues");
    expect(res_6.body.spec.templates[0].container.volume_mounts[0].read_only).toBe(null);
    expect(res_6.body.spec.templates[0].container.volume_mounts[0].sub_path).toBe("allvalues.yaml");
    expect(res_6.body.spec.templates[0].container.volume_mounts[0].sub_path_expr).toBe(null);
    expect(res_6.body.spec.templates[0].container.working_dir).toBe(null);
    expect(res_6.body.spec.templates[0].daemon).toBe(null);
    expect(res_6.body.spec.templates[0].dag).toBe(null);
    expect(res_6.body.spec.templates[0].executor).toBe(null);
    expect(res_6.body.spec.templates[0].host_aliases).toBe(null);
    expect(res_6.body.spec.templates[0].init_containers).toBe(null);
    expect(res_6.body.spec.templates[0].inputs.artifacts).toBe(null);
    expect(res_6.body.spec.templates[0].inputs.parameters).toBe(null);
    expect(res_6.body.spec.templates[0].memoize).toBe(null);
    expect(res_6.body.spec.templates[0].metadata.annotations).toBe(null);
    expect(res_6.body.spec.templates[0].metadata.labels).toBe(null);
    expect(res_6.body.spec.templates[0].metrics).toBe(null);
    expect(res_6.body.spec.templates[0].name).toBe("download-file");
    expect(res_6.body.spec.templates[0].node_selector).toBe(null);
    expect(res_6.body.spec.templates[0].outputs.artifacts).toBe(null);
    expect(res_6.body.spec.templates[0].outputs.exit_code).toBe(null);
    expect(res_6.body.spec.templates[0].outputs.parameters).toBe(null);
    expect(res_6.body.spec.templates[0].outputs.result).toBe(null);
    expect(res_6.body.spec.templates[0].parallelism).toBe(null);
    expect(res_6.body.spec.templates[0].pod_spec_patch).toBe(null);
    expect(res_6.body.spec.templates[0].priority).toBe(null);
    expect(res_6.body.spec.templates[0].priority_class_name).toBe(null);
    expect(res_6.body.spec.templates[0].resource).toBe(null);
    expect(res_6.body.spec.templates[0].retry_strategy).toBe(null);
    expect(res_6.body.spec.templates[0].scheduler_name).toBe(null);
    expect(res_6.body.spec.templates[0].script).toBe(null);
    expect(res_6.body.spec.templates[0].security_context).toBe(null);
    expect(res_6.body.spec.templates[0].service_account_name).toBe(null);
    expect(res_6.body.spec.templates[0].sidecars).toBe(null);
    expect(res_6.body.spec.templates[0].steps).toBe(null);
    expect(res_6.body.spec.templates[0].suspend).toBe(null);
    expect(res_6.body.spec.templates[0].synchronization).toBe(null);
    expect(res_6.body.spec.templates[0].template).toBe(null);
    expect(res_6.body.spec.templates[0].template_ref).toBe(null);
    expect(res_6.body.spec.templates[0].timeout).toBe(null);
    expect(res_6.body.spec.templates[0].tolerations).toBe(null);
    expect(res_6.body.spec.templates[0].volumes).toBe(null);
    expect(res_6.body.spec.tolerations).toBe(null);
    expect(res_6.body.spec.ttl_seconds_after_finished).toBe(null);
    expect(res_6.body.spec.ttl_strategy.seconds_after_completion).toBe(3600.0);
    expect(res_6.body.spec.ttl_strategy.seconds_after_failure).toBe(7200.0);
    expect(res_6.body.spec.ttl_strategy.seconds_after_success).toBe(1200.0);
    expect(res_6.body.spec.volume_claim_gc).toBe(null);
    expect(res_6.body.spec.volume_claim_templates).toBe(null);
    expect(res_6.body.spec.volumes.length).toBe(1);
    expect(res_6.body.spec.volumes[0].aws_elastic_block_store).toBe(null);
    expect(res_6.body.spec.volumes[0].azure_disk).toBe(null);
    expect(res_6.body.spec.volumes[0].azure_file).toBe(null);
    expect(res_6.body.spec.volumes[0].cephfs).toBe(null);
    expect(res_6.body.spec.volumes[0].cinder).toBe(null);
    expect(res_6.body.spec.volumes[0].config_map.default_mode).toBe(null);
    expect(res_6.body.spec.volumes[0].config_map.items).toBe(null);
    expect(res_6.body.spec.volumes[0].config_map.name).toBe("cloudharness-allvalues");
    expect(res_6.body.spec.volumes[0].config_map.optional).toBe(null);
    expect(res_6.body.spec.volumes[0].csi).toBe(null);
    expect(res_6.body.spec.volumes[0].downward_api).toBe(null);
    expect(res_6.body.spec.volumes[0].empty_dir).toBe(null);
    expect(res_6.body.spec.volumes[0].fc).toBe(null);
    expect(res_6.body.spec.volumes[0].flex_volume).toBe(null);
    expect(res_6.body.spec.volumes[0].flocker).toBe(null);
    expect(res_6.body.spec.volumes[0].gce_persistent_disk).toBe(null);
    expect(res_6.body.spec.volumes[0].git_repo).toBe(null);
    expect(res_6.body.spec.volumes[0].glusterfs).toBe(null);
    expect(res_6.body.spec.volumes[0].host_path).toBe(null);
    expect(res_6.body.spec.volumes[0].iscsi).toBe(null);
    expect(res_6.body.spec.volumes[0].name).toBe("cloudharness-allvalues");
    expect(res_6.body.spec.volumes[0].nfs).toBe(null);
    expect(res_6.body.spec.volumes[0].persistent_volume_claim).toBe(null);
    expect(res_6.body.spec.volumes[0].photon_persistent_disk).toBe(null);
    expect(res_6.body.spec.volumes[0].portworx_volume).toBe(null);
    expect(res_6.body.spec.volumes[0].projected).toBe(null);
    expect(res_6.body.spec.volumes[0].quobyte).toBe(null);
    expect(res_6.body.spec.volumes[0].rbd).toBe(null);
    expect(res_6.body.spec.volumes[0].scale_io).toBe(null);
    expect(res_6.body.spec.volumes[0].secret).toBe(null);
    expect(res_6.body.spec.volumes[0].storageos).toBe(null);
    expect(res_6.body.spec.volumes[0].vsphere_volume).toBe(null);
    expect(res_6.body.spec.workflow_template_ref).toBe(null);
    expect(res_6.body.status.compressed_nodes).toBe(null);
    expect(res_6.body.status.conditions.length).toBe(2);
    expect(res_6.body.status.conditions[0].message).toBe(null);
    expect(res_6.body.status.conditions[0].status).toBe("False");
    expect(res_6.body.status.conditions[0].type).toBe("PodRunning");
    expect(res_6.body.status.conditions[1].message).toBe(null);
    expect(res_6.body.status.conditions[1].status).toBe("True");
    expect(res_6.body.status.conditions[1].type).toBe("Completed");
    expect(res_6.body.status.estimated_duration).toBe(null);
    expect(res_6.body.status.finished_at).toBe("2022-06-07T14:56:29+00:00");
    expect(res_6.body.status.message).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.boundary_id).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.children).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.daemoned).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.display_name).toBe("test-sync-op-jnjrc");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.estimated_duration).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.finished_at).toBe("2022-06-07T14:56:21+00:00");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.host_node_name).toBe("docker-desktop");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.inputs).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.memoization_status).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.message).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.name).toBe("test-sync-op-jnjrc");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.outbound_nodes).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.outputs.artifacts).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.outputs.exit_code).toBe("0");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.outputs.parameters).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.outputs.result).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.phase).toBe("Succeeded");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.pod_ip).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.progress).toBe("1/1");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.resources_duration.cpu).toBe(1.0);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.resources_duration.memory).toBe(1.0);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.started_at).toBe("2022-06-07T14:56:19+00:00");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.stored_template_id).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.synchronization_status).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.template_name).toBe("download-file");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.template_ref).toBe(null);
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.template_scope).toBe("local/test-sync-op-jnjrc");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.type).toBe("Pod");
    expect(res_6.body.status.nodes.test-sync-op-jnjrc.workflow_template_name).toBe(null);
    expect(res_6.body.status.offload_node_status_version).toBe(null);
    expect(res_6.body.status.outputs).toBe(null);
    expect(res_6.body.status.persistent_volume_claims).toBe(null);
    expect(res_6.body.status.phase).toBe("Succeeded");
    expect(res_6.body.status.progress).toBe("1/1");
    expect(res_6.body.status.resources_duration.cpu).toBe(1.0);
    expect(res_6.body.status.resources_duration.memory).toBe(1.0);
    expect(res_6.body.status.started_at).toBe("2022-06-07T14:56:19+00:00");
    expect(res_6.body.status.stored_templates).toBe(null);
    expect(res_6.body.status.stored_workflow_template_spec).toBe(null);
    expect(res_6.body.status.synchronization).toBe(null);
    
    const res_7 = await superagent
            .get(baseUrlOfSut + "/api/operation_sync_results?b=0.5897054810260409").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_7.status).toBe(200);
    expect(res_7.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_7.body.length).toBe(1);
    expect(res_7.body[0].result).toBe("1.589705481026041");
});
