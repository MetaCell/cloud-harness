openapi: "3.0.3"
info:
  title: CloudHarness Sample API
  version: 0.1.0
  description: CloudHarness Sample api
  contact:
    email: cloudharness@metacell.us
  license:
    name: UNLICENSED
servers:
  - url: /api
paths:
  /error:
    get:
      tags:
        - test
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: This won't happen
        "500":
          description: Sentry entry should come!
      deprecated: true
      operationId: error
      summary: test sentry is working
      x-openapi-router-controller: samples.controllers.test_controller

  /ping:
    get:
      tags:
        - test
      responses:
        "200":
          content:
            application/json:
              schema:
                type: number
          description: What we want
        "500":
          description: This shouldn't happen
      operationId: ping
      summary: test the application is up
      x-openapi-router-controller: samples.controllers.test_controller
  /valid:
    get:
      tags:
        - auth
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Check if token is valid
        "401":
          description: "invalid token, unauthorized"
      security:
        - bearerAuth: []
      operationId: valid_token
      summary: Check if the token is valid. Get a token by logging into the base url
      description: |
        Check if the token is valid
      x-openapi-router-controller: samples.controllers.auth_controller
  /valid-cookie:
    get:
      tags:
        - auth
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Check if token is valid
        "401":
          description: "invalid token, unauthorized"
      security:
        - cookieAuth: []
      operationId: valid_cookie
      summary: Check if the token is valid. Get a token by logging into the base url
      description: |
        Check if the token is valid
      x-openapi-router-controller: samples.controllers.auth_controller
  /sampleresources:
    summary: Path used to manage the list of sampleresources.
    description: >-
      The REST endpoint/path used to list and create zero or more `SampleResource` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - resource
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SampleResource"
          description: Successful response - returns an array of `SampleResource` entities.
      operationId: getSampleResources
      summary: List All SampleResources
      description: Gets a list of all `SampleResource` entities.
    post:
      requestBody:
        description: A new `SampleResource` to be created.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SampleResource"
        required: true
      tags:
        - resource
      responses:
        "201":
          description: Successful response.
        "400":
          description: Payload must be of type SampleResource
      operationId: createSampleResource
      summary: Create a SampleResource
      description: Creates a new instance of a `SampleResource`.
  "/sampleresources/{sampleresourceId}":
    summary: Path used to manage a single SampleResource.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `SampleResource`. 
      This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and
      delete tasks, respectively.
    get:
      tags:
        - resource
      parameters:
        - name: sampleresourceId
          description: A unique identifier for a `SampleResource`.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SampleResource"
          description: Successful response - returns a single `SampleResource`.
        "400":
          description: Parameter must be integer
        "404":
          description: Resource not found
      operationId: getSampleResource
      summary: Get a SampleResource
      description: Gets the details of a single instance of a `SampleResource`.
    put:
      requestBody:
        description: Updated `SampleResource` information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SampleResource"
        required: true
      tags:
        - resource
      parameters:
        - name: sampleresourceId
          description: A unique identifier for a `SampleResource`.
          schema:
            type: string
          in: path
          required: true
      responses:
        "202":
          description: Successful response.
        "400":
          description: "Parameter must be integer, payload must be of type SampleResource"
        "404":
          description: Resource not found
      operationId: updateSampleResource
      summary: Update a SampleResource
      description: Updates an existing `SampleResource`.
    delete:
      tags:
        - resource
      parameters:
        - name: sampleresourceId
          description: A unique identifier for a `SampleResource`.
          schema:
            type: string
          in: path
          required: true
      responses:
        "204":
          description: Successful response.
        "400":
          description: Parameter must be integer
        "404":
          description: Resource not found
      operationId: deleteSampleResource
      summary: Delete a SampleResource
      description: Deletes an existing `SampleResource`.
    parameters:
      - name: sampleresourceId
        description: A unique identifier for a `SampleResource`.
        schema:
          type: string
        in: path
        required: true
  /operation_async:
    get:
      tags:
        - workflows
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_202"
          description: "Submitted operation. See also https://restfulapi.net/http-status-202-accepted/"
      operationId: submit_async
      summary: Send an asynchronous operation
      x-openapi-router-controller: samples.controllers.workflows_controller
  /operation_sync:
    get:
      tags:
        - workflows
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Operation result
      deprecated: true
      operationId: submit_sync
      summary: Send a synchronous operation
      x-openapi-router-controller: samples.controllers.workflows_controller
  /operation_sync_results:
    get:
      deprecated: true
      tags:
        - workflows
      parameters:
        - style: form
          explode: true
          example: 10
          name: a
          description: first number to sum
          schema:
            type: number
          in: query
          required: true
        - style: form
          explode: true
          example: 10
          name: b
          description: second number to sum
          schema:
            type: number
          in: query
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Operation result
      operationId: submit_sync_with_results
      summary: >-
        Send a synchronous operation and get results using the event queue. Just a sum, but in the
        cloud
      x-openapi-router-controller: samples.controllers.workflows_controller
components:
  schemas:
    inline_response_202_task:
      title: inline_response_202_task
      type: object
      properties:
        href:
          title: href
          description: the url where to check the operation status
          type: string
          example: "http://workflows.cloudharness.metacell.us/api/operation/my-op"
        name:
          title: name
          type: string
          example: my-op
      example:
        name: my-op
        href: "http://workflows.cloudharness.metacell.us/api/operation/my-op"
    inline_response_202:
      title: inline_response_202
      type: object
      properties:
        task:
          $ref: "#/components/schemas/inline_response_202_task"
      example:
        task:
          name: my-op
          href: "http://workflows.cloudharness.metacell.us/api/operation/my-op"
    SampleResource:
      description: ""
      required:
        - a
      type: object
      properties:
        a:
          description: ""
          type: number
        b:
          description: ""
          type: number
        id:
          description: ""
          type: number
  securitySchemes:
    bearerAuth:
      scheme: bearer
      bearerFormat: JWT
      type: http
      x-bearerInfoFunc: cloudharness.auth.decode_token
    cookieAuth:
      type: apiKey
      name: kc-access
      in: cookie
      x-apikeyInfoFunc: cloudharness.auth.decode_token
tags:
  - name: auth
  - name: workflows
  - name: resource
    description: ""
