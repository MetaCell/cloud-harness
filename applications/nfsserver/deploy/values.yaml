harness:
  subdomain: nfsserver
  service:
    auto: false
  deployment:
    auto: false


# nfs server pvc disk size (/exports)
server:
  diskSize: 10Gi

# nfs-subdir-external-provisioner
# https://github.com/MetaCell/nfs-subdir-external-provisioner
fullnameOverride: nfs-provisioner
nameOverride: nfs-provisioner

replicaCount: 1
strategyType: Recreate

provisionerImage:
  repository: us.gcr.io/metacellllc/nfs-subdir-external-provisioner
  tag: latest
  pullPolicy: IfNotPresent
imagePullSecrets: []

# buildMode: true

nfs:
  server: nfs-server
  path: /exports
  mountOptions:
  volumeName: nfs-subdir-external-provisioner-root
  # Reclaim policy for the main nfs volume
  reclaimPolicy: Retain

# For creating the StorageClass automatically:
storageClass:
  create: true

  # Set a provisioner name. If unset, a name will be generated.
  # provisionerName:

  # Set StorageClass as the default StorageClass
  # Ignored if storageClass.create is false
  defaultClass: false

  # Set a StorageClass base name (will be concatenated with namespace)
  # Ignored if storageClass.create is false
  name: nfs-client

  # Allow volume to be expanded dynamically
  allowVolumeExpansion: true

  # Method used to reclaim an obsoleted volume
  reclaimPolicy: Delete

  # When set to false your PVs will not be archived by the provisioner upon deletion of the PVC.
  archiveOnDelete: true

  # If it exists and has 'delete' value, delete the directory. If it exists and has 'retain' value, save the directory.
  # Overrides archiveOnDelete.
  # Ignored if value not set.
  onDelete:

  # Specifies a template for creating a directory path via PVC metadata's such as labels, annotations, name or namespace.
  # Ignored if value not set.
  pathPattern:

  # Set access mode - ReadWriteOnce, ReadOnlyMany or ReadWriteMany
  accessModes: ReadWriteOnce

  # Set volume bindinng mode - Immediate or WaitForFirstConsumer
  volumeBindingMode: Immediate

  # Storage class annotations
  annotations: {}

leaderElection:
  # When set to false leader election will be disabled
  enabled: true

## For RBAC support:
rbac:
  # Specifies whether RBAC resources should be created
  create: true

# If true, create & use Pod Security Policy resources
# https://kubernetes.io/docs/concepts/policy/pod-security-policy/
podSecurityPolicy:
  enabled: false

# Deployment pod annotations
podAnnotations: {}

## Set pod priorityClassName
# priorityClassName: ""

podSecurityContext: {}

securityContext: {}

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true

  # Annotations to add to the service account
  annotations: {}

  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

resources:
  limits:
   cpu: 100m
   memory: 128Mi
  requests:
   cpu: 10m
   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {
  podAffinity: {
    requiredDuringSchedulingIgnoredDuringExecution: [{
      labelSelector: {
        matchExpressions: [{
          key: 'app',
          operator: 'In',
          values: ['nfs-server',]
        }]
      },
      topologyKey: kubernetes.io/hostname
    },]}
}

# Additional labels for any resource created
labels: {}
