# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from workflows_api.models.base_model_ import Model
from workflows_api import util
from .operation_status import OperationStatus

class Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message=None, name=None, create_time=None, status=None, workflow=None):  # noqa: E501
        """Operation - a model defined in OpenAPI

        :param message: The message of this Operation.  # noqa: E501
        :type message: str
        :param name: The name of this Operation.  # noqa: E501
        :type name: str
        :param create_time: The create_time of this Operation.  # noqa: E501
        :type create_time: datetime
        :param status: The status of this Operation.  # noqa: E501
        :type status: OperationStatus
        :param workflow: The workflow of this Operation.  # noqa: E501
        :type workflow: str
        """
        self.openapi_types = {
            'message': str,
            'name': str,
            'create_time': datetime,
            'status': OperationStatus,
            'workflow': str
        }

        self.attribute_map = {
            'message': 'message',
            'name': 'name',
            'create_time': 'createTime',
            'status': 'status',
            'workflow': 'workflow'
        }

        self._message = message
        self._name = name
        self._create_time = create_time
        self._status = status
        self._workflow = workflow

    @classmethod
    def from_dict(cls, dikt) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Operation of this Operation.  # noqa: E501
        :rtype: Operation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Operation.

        usually set when an error occurred  # noqa: E501

        :return: The message of this Operation.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Operation.

        usually set when an error occurred  # noqa: E501

        :param message: The message of this Operation.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this Operation.

        operation name  # noqa: E501

        :return: The name of this Operation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Operation.

        operation name  # noqa: E501

        :param name: The name of this Operation.
        :type name: str
        """

        self._name = name

    @property
    def create_time(self):
        """Gets the create_time of this Operation.


        :return: The create_time of this Operation.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Operation.


        :param create_time: The create_time of this Operation.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def status(self):
        """Gets the status of this Operation.


        :return: The status of this Operation.
        :rtype: OperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Operation.


        :param status: The status of this Operation.
        :type status: OperationStatus
        """

        self._status = status

    @property
    def workflow(self):
        """Gets the workflow of this Operation.

        low level representation as an Argo json  # noqa: E501

        :return: The workflow of this Operation.
        :rtype: str
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this Operation.

        low level representation as an Argo json  # noqa: E501

        :param workflow: The workflow of this Operation.
        :type workflow: str
        """

        self._workflow = workflow
