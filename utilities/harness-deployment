#!/usr/bin/env python

import sys
import os

from cloudharness_utilities.build import Builder
from cloudharness_utilities.utils import merge_app_directories
from cloudharness_utilities.helm import create_helm_chart, hosts_info, deploy
from cloudharness_utilities.codefresh import create_codefresh_deployment_scripts

HERE = os.path.dirname(os.path.realpath(__file__)).replace(os.path.sep, '/')
ROOT = os.path.dirname(os.path.dirname(HERE)).replace(os.path.sep, '/')

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description='Walk filesystem inside ./applications and define build and deploy scripts.')

    parser.add_argument('paths', metavar='paths', default=[ROOT], type=str, nargs='*',
                        help='Base paths to start looking for applications. The paths will be processed '
                             'in the given order so determining the build and overriding precedence.')

    parser.add_argument('-i', '--include', dest='include', action="append", default=[],
                        help='Specify the applications to include and exclude the rest. '
                             'Omit to build images for all Docker files.')

    parser.add_argument('-t', '--tag', dest='tag', action="store", default='latest',
                        help='Add a tag with the current version (default `latest`)')

    parser.add_argument('-n', '--namespace', dest='namespace', action="store", default='default',
                        help='Specify the namespace of the deployment (default `default`)')

    parser.add_argument('-r', '--registry', dest='registry', action="store", default='',
                        help='Specify image registry prefix')
    parser.add_argument('-rs', '--registry-secret', dest='registry_secret', action="store", default='',
                        help='Specify image registry secret')
    parser.add_argument('-o', '--output', dest='output_path', action="store", default='./deployment',
                        help='Specify helm chart base path (default `./deployment)`')
    parser.add_argument('-b', '--build', dest='build', action="store_true",
                        help='Builds and pushes Docker images in the specified registry (if any)')
    parser.add_argument('-d', '--domain', dest='domain', action="store", default="cloudharness.metacell.us",
                        help='Specify a domain different from cloudharness.metacell.us')
    parser.add_argument('-bi', '--build-interactive', dest='build_interactive', action="store_true",
                        help='Builds and pushes Docker images in the specified registry (if any).'
                             'Asks interactively what images to build')
    parser.add_argument('-l', '--local', dest='local', action="store_true",
                        help='Specify for local deployments info and setup')
    parser.add_argument('-u', '--disable-security', dest='unsecured', action="store_true",
                        help='Disable secured gatekeepers access')
    parser.add_argument('-e', '--exclude', dest='exclude', action="append", default=[],
                        help='Specify application to exclude from the deployment')

    parser.add_argument('-m', '--merge', dest='merge', action="store", default=None,
                        help='Merge application folders and build in the given directory')

    parser.add_argument('-dtls', '--disable-tls', dest='no_tls', action="store_true",
                        help='Disable tls (serve on http)')
    parser.add_argument('--deploy', dest='deploy', action="store_true",
                        help='Deploy helm chart')

    args, unknown = parser.parse_known_args(sys.argv[1:])

    root_paths = [os.path.join(os.getcwd(), path) for path in args.paths]
    if unknown:
        print('There are unknown args. Make sure to call the script with the accepted args. Try --help')
        print(f'unknown: {unknown}')
    else:

        builder = Builder(root_paths, args.include, tag=args.tag, registry=args.registry, interactive=args.build_interactive,
                    exclude=args.exclude, namespace=args.namespace, domain=args.domain)
        
        if args.merge:
            merge_app_directories(builder.root_paths, destination=args.merge)
            builder.root_paths = [args.merge]
        if args.build or args.build_interactive:
            builder.run()

        values_manual_deploy = create_helm_chart(
            root_paths,
            tag=args.tag,
            registry=args.registry,
            domain=args.domain,
            local=args.local,
            secured=not args.unsecured,
            output_path=args.output_path,
            exclude=args.exclude,
            include=args.include,
            registry_secret=args.registry_secret,
            tls=not args.no_tls
        )
        create_codefresh_deployment_scripts(builder.root_paths, include=args.include) # LEGACY
        create_codefresh_deployment_scripts(builder.root_paths, include=args.include, template_name='codefresh-template-dev.yaml', out_filename="codefresh-dev.yaml")
        create_codefresh_deployment_scripts(builder.root_paths, include=args.include,
                                            template_name='codefresh-template-prod.yaml', out_filename="codefresh-prod.yaml")
        hosts_info(values_manual_deploy)

    if args.deploy:
        deploy(args.namespace, args.output_path)