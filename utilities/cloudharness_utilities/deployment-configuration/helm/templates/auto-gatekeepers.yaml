{{/* Secured Services/Deployments */}}
{{- define "deploy_utils.securedservice" }}
{{- $tls := not (not .root.Values.tls) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .app.harness.service.name }}-gk"
  labels:
    app: "{{ .app.harness.service.name }}-gk"
data:
  proxy.yml: |-
    verbose: true
    discovery-url: {{ ternary "https" "http" $tls}}://{{ .root.Values.apps.accounts.harness.subdomain }}.{{ .root.Values.domain }}/auth/realms/{{ .root.Values.namespace }}
    client-id: {{ .root.Values.apps.accounts.webclient.id | quote }}
    client-secret: {{ .root.Values.apps.accounts.webclient.secret }}
    secure-cookie: {{ $tls }}
    listen: 0.0.0.0:8080
    enable-refresh-tokens: true
    tls-cert:
    tls-private-key:
    redirection-url: {{ ternary "https" "http" $tls }}://{{ .app.harness.subdomain }}.{{ .root.Values.domain }}
    encryption-key: AgXa7xRcoClDEU0ZDSH4X0XhL5Qy2Z2j
    upstream-url: http://{{ .app.harness.service.name }}.{{ .app.namespace | default .root.Release.Namespace }}:{{ .app.harness.service.port | default 80}}
    {{ if .app.harness.secured }}
      {{ with .app.harness.uri_role_mapping }}
    resources:
    {{. | toYaml | nindent 4 }}
      {{- end }}
    {{- end }}
    {{ if or .root.Values.local (not $tls) }}
    skip-openid-provider-tls-verify: true
    {{- end }}
  cacert.crt: {{ .files.Get "resources/certs/cacert.crt" | quote }}
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .app.harness.service.name }}-gk"
  labels:
    app: "{{ .app.harness.service.name }}-gk"
spec:
  ports:
  - name: http
    port: 8080
  selector:
    app: "{{ .app.harness.service.name }}-gk"
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .app.harness.service.name }}-gk"
  labels:
    app: "{{ .app.harness.service.name }}-gk"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .app.harness.service.name }}-gk"
  template:
    metadata:
      labels:
        app: "{{ .app.harness.service.name }}-gk"
    spec:
{{ include "deploy_utils.etcHosts" .root | indent 6 }}
      containers:
      - name: {{ .app.harness.service.name | quote }}
        image: "gcr.io/metacellllc/louketo-proxy:1.0.0"
        imagePullPolicy: IfNotPresent
        {{ if .root.Values.local }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
        command: 
        - "/bin/bash"
        - "-c"
        args:
        - "sleep 10 && /bin/update-ca-trust force enable && /bin/update-ca-trust && /opt/louketo/louketo-proxy"
        {{- end }}
        env:
        - name: PROXY_CONFIG_FILE
          value: /opt/proxy.yml
        volumeMounts:
        - name: "{{ .app.harness.service.name }}-gk-proxy-config"
          mountPath: /opt/proxy.yml
          subPath: proxy.yml
        - name: "{{ .app.harness.service.name }}-gk-proxy-config"
          mountPath: /etc/pki/ca-trust/source/anchors/cacert.crt
          subPath: cacert.crt
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
      volumes:
      - name: "{{ .app.harness.service.name }}-gk-proxy-config"
        configMap:
          name: "{{ .app.harness.service.name }}-gk"
---
{{- end }}
{{- if .Values.secured_gatekeepers }}
{{ $files := .Files }}
{{- range $app := .Values.apps }}
  {{- if and (hasKey $app "port") ($app.harness.secured)   }}
---
    {{ include "deploy_utils.securedservice" (dict "root" $ "app" $app "files" $files) }}
    {{- end }}
  {{- range $subapp := $app }}
  {{- if contains "map" (typeOf $subapp)  }}
    {{- if and (hasKey $subapp "harness.port") (hasKey $subapp "harness.secured") }}
      {{- if $subapp.harness.secured }}
---
      {{ include "deploy_utils.securedservice" (dict "root" $ "app" $subapp "files" $files) }}
    {{- end }}
  {{- end }}
  {{- end }}
  {{- end }}
 {{- end }}
{{- end }}
