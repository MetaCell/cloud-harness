{{- define "deploy_utils.deployment" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .app.harness.deployment.name| quote }}
  namespace: {{ .root.Values.namespace }}
  labels:
    app: {{ .app.harness.deployment.name| quote }}
    {{- if .app.harness.deployment.volume }}
    usesvolume: {{ .app.harness.deployment.volume.name }}
    {{- end }}
{{- include "deploy_utils.labels" .root | indent 4 }}
spec:
  replicas: {{ .app.harness.deployment.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ .app.harness.deployment.name| quote }}
{{- include "deploy_utils.labels" .root | indent 6 }}
  template:
    metadata:
      {{- if .app.harvest }}
      annotations:
        co.elastic.logs/enabled: "true"
        metricbeat: "true"
      {{- end }}
      labels:
        app: {{ .app.harness.deployment.name| quote }}
        {{- if .app.harness.deployment.volume }}
        usesvolume: {{ .app.harness.deployment.volume.name }}
        {{- end }}
{{- include "deploy_utils.labels" .root | indent 8 }}
    spec:
      {{- if and .root.Values.registry.secret (contains .root.Values.registry.name .app.harness.deployment.image) }}
      imagePullSecrets:
      - name: {{ .root.Values.registry.secret }}
      {{- end }}
      {{- if and .app.harness.deployment.volume }}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: usesvolume
                    operator: In
                    values:
                      - {{ .app.harness.deployment.volume.name }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      containers:
      - name: {{ .app.harness.deployment.name| default "cloudharness-docs" | quote }}
        image: {{ .app.harness.deployment.image }}
        imagePullPolicy: {{ include "deploy_utils.pullpolicy" .root }}
        {{- if .app.harness.deployment.command }}
        command: {{ .app.harness.deployment.command }}
        {{- end }}
        {{- if .app.harness.deployment.args }}
        args: {{ .app.harness.deployment.args }}
        {{- end }}
        env:
        - name: CH_CURRENT_APP_NAME
          value: {{ .app.harness.name | quote }}
          {{- include "deploy_utils.env" .root | nindent 8 }}
          {{- include "deploy_utils.privenv" .root | nindent 8 }}
          {{- if .app.harness.env }}
            {{- .app.harness.env | toYaml | nindent 8 }}
          {{- end }}
{{ if .app.harness.livenessProbe }}
        livenessProbe:
          httpGet:
            path: {{ .app.harness.livenessProbe.path }}
            port: {{ .app.harness.deployment.port | default 8080 }}
          periodSeconds: {{ .app.harness.livenessProbe.periodSeconds | default 10 }}
          failureThreshold: {{ .app.harness.livenessProbe.failureThreshold | default 3 }}
          initialDelaySeconds: {{ .app.harness.livenessProbe.initialDelaySeconds | default 0 }}
{{ end }}
{{ if .app.harness.readinessProbe }}
        readinessProbe:
          httpGet:
            path: {{ .app.harness.readinessProbe.path }}
            port: {{ .app.harness.deployment.port | default 8080 }}
          periodSeconds: {{ .app.harness.readinessProbe.periodSeconds | default 10 }}
          failureThreshold: {{ .app.harness.readinessProbe.failureThreshold | default 3 }}
          initialDelaySeconds: {{ .app.harness.readinessProbe.initialDelaySeconds | default 0 }}
{{ end }}
{{ if .app.harness.startupProbe }}
        startupProbe:
          httpGet:
            path: {{ .app.harness.startupProbe.path }}
            port: {{ .app.harness.deployment.port | default 8080 }}
          periodSeconds: {{ .app.harness.startupProbe.periodSeconds | default 10 }}
          failureThreshold: {{ .app.harness.startupProbe.failureThreshold | default 30 }}
          initialDelaySeconds: {{ .app.harness.startupProbe.initialDelaySeconds | default 0 }}
{{ end }}
        ports:
          - containerPort: {{ .app.harness.deployment.port | default 8080 }}
        resources:
          requests:
            memory: {{ .app.harness.deployment.resources.requests.memory | default "32Mi" }}
            cpu: {{ .app.harness.deployment.resources.requests.cpu | default "25m" }}
          limits:
            memory: {{ .app.harness.deployment.resources.limits.memory | default "64Mi" }}
            cpu: {{ .app.harness.deployment.resources.limits.cpu | default "50m" }}

        volumeMounts:
          - name: cloudharness-allvalues
            mountPath: /opt/cloudharness/resources
            readOnly: true
          {{- if .app.harness.deployment.volume }}
          - name: {{ .app.harness.deployment.volume.name }}
            mountPath: {{ .app.harness.deployment.volume.mountpath }}
            readOnly: {{ .app.harness.deployment.volume.readonly | default false }}
          {{- end }}
          {{- $app := .app}}
          {{- range $resource := .app.harness.resources }}
          - name: "{{ $app.harness.deployment.name }}-{{ $resource.name }}"
            mountPath: {{ $resource.dst }}
            subPath: {{ base $resource.dst }}
            readOnly: true
          {{- end}}
          {{- if .app.harness.secrets }}
          - name: secrets
            mountPath: "/opt/cloudharness/resources/secrets"
            readOnly: true
          {{- end }}
      volumes:
        - name: cloudharness-allvalues
          configMap:
            name: cloudharness-allvalues
        {{- if .app.harness.deployment.volume }}
        - name: {{ .app.harness.deployment.volume.name }}
          persistentVolumeClaim:
            claimName: {{ .app.harness.deployment.volume.name }}
        {{- end }}
        {{ $app := .app }}
        {{- range $resource := .app.harness.resources }}
        - name: "{{ $app.harness.deployment.name }}-{{ $resource.name }}"
          configMap:
            name: "{{ $app.harness.deployment.name }}-{{ $resource.name }}"
        {{- end }}
        {{- if .app.harness.secrets }}
        - name: secrets
          secret:
            secretName: {{ .app.harness.deployment.name }}
        {{- end }}
---
{{- end }}

{{- define "deploy_utils.resource"}}
kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .app.harness.deployment.name }}-{{ .resource.name }}"
  labels:
    app: {{ .app.harness.deployment.name | quote }}
  {{ include "deploy_utils.labels" .root | indent 4 }}
data:
  {{ base .resource.dst }}: {{ tpl (.root.Files.Get (print "resources/" .app.harness.deployment.name "/" .resource.src)) .root | quote }}
---
{{- end}}

{{- range $app := .Values.apps }}
  {{- if and (hasKey $app "port") $app.harness.deployment.auto | default false  }}
---
    {{- include "deploy_utils.deployment" (dict "root" $ "app" $app) }}
    {{- range $resource := $app.harness.resources }}
    {{- include "deploy_utils.resource" (dict "app" $app "resource" $resource "root" $) }}
    {{- end }}
  {{- end }}
  {{- range $subapp := $app }}
  {{- if contains "map" (typeOf $subapp)  }}
  {{- if hasKey $subapp "harness" }}
---
      {{- include "deploy_utils.deployment" (dict "root" $ "app" $subapp) }}
  {{- end }}
  {{- end }}
  {{- end }}
 {{- end }}