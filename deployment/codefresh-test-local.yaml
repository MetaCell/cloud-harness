version: '1.0'
stages:
- prepare
- build
- unittest
- deploy
- qa
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: prepare
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}'
    git: github
  post_main_clone:
    title: Post main clone
    type: parallel
    stage: prepare
    steps:
    - title: Cloning cloud-harness repository...
      type: git-clone
      stage: prepare
      repo: https://github.com/MetaCell/cloud-harness.git
      revision: '${{CLOUDHARNESS_BRANCH}}'
      working_directory: .
      git: github
  prepare_deployment:
    title: Prepare helm chart
    image: python:3.9.10
    stage: prepare
    working_directory: .
    commands:
    - bash cloud-harness/install.sh
    - harness-deployment . -n test-${{NAMESPACE_BASENAME}} -d ${{DOMAIN}} -r ${{REGISTRY}}
      -rs ${{REGISTRY_SECRET}} -e test-local --write-env -N -i jupyterhub
    - cat deployment/.env >> ${{CF_VOLUME_PATH}}/env_vars_to_export
    - cat ${{CF_VOLUME_PATH}}/env_vars_to_export
  prepare_deployment_view:
    commands:
    - helm template ./deployment/helm --debug -n test-${{NAMESPACE_BASENAME}}-${{CF_SHORT_REVISION}}
    environment:
    - ACTION=auth
    - KUBE_CONTEXT=test-${{CF_BUILD_ID}}
    image: codefresh/cfstep-helm:3.6.2
    stage: prepare
    title: View helm chart
  build_base_images:
    title: Build base images
    type: parallel
    stage: build
    steps:
      cloudharness-base:
        type: build
        stage: build
        dockerfile: infrastructure/base-images/cloudharness-base/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/cloudharness-base
        title: Cloudharness base
        working_directory: ./.
        tag: '${{CLOUDHARNESS_BASE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{CLOUDHARNESS_BASE_TAG_EXISTS}}', '{{CLOUDHARNESS_BASE_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{CLOUDHARNESS_BASE_TAG_FORCE_BUILD}}', '{{CLOUDHARNESS_BASE_TAG_FORCE_BUILD}}')
                == false
  build_application_images:
    type: parallel
    stage: build
    steps:
      accounts:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/accounts
        title: Accounts
        working_directory: ./applications/accounts
        tag: '${{ACCOUNTS_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{ACCOUNTS_TAG_EXISTS}}', '{{ACCOUNTS_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{ACCOUNTS_TAG_FORCE_BUILD}}', '{{ACCOUNTS_TAG_FORCE_BUILD}}')
                == false
      jupyterhub:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: cloudharness/jupyterhub
        title: Jupyterhub
        working_directory: ./applications/jupyterhub
        tag: '${{JUPYTERHUB_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_TAG_EXISTS}}', '{{JUPYTERHUB_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{JUPYTERHUB_TAG_FORCE_BUILD}}', '{{JUPYTERHUB_TAG_FORCE_BUILD}}')
                == false
      jupyterhub-zero-to-jupyterhub-k8s-images-secret-sync:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-zero-to-jupyterhub-k8s-images-secret-sync
        title: Jupyterhub zero to jupyterhub k8s images secret sync
        working_directory: ./applications/jupyterhub/zero-to-jupyterhub-k8s/images/secret-sync
        tag: '${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_SECRET_SYNC_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_SECRET_SYNC_TAG_EXISTS}}',
                '{{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_SECRET_SYNC_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_SECRET_SYNC_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_SECRET_SYNC_TAG_FORCE_BUILD}}')
                == false
      jupyterhub-zero-to-jupyterhub-k8s-images-image-awaiter:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-zero-to-jupyterhub-k8s-images-image-awaiter
        title: Jupyterhub zero to jupyterhub k8s images image awaiter
        working_directory: ./applications/jupyterhub/zero-to-jupyterhub-k8s/images/image-awaiter
        tag: '${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_IMAGE_AWAITER_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_IMAGE_AWAITER_TAG_EXISTS}}',
                '{{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_IMAGE_AWAITER_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_IMAGE_AWAITER_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_IMAGE_AWAITER_TAG_FORCE_BUILD}}')
                == false
      jupyterhub-zero-to-jupyterhub-k8s-images-singleuser-sample:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-zero-to-jupyterhub-k8s-images-singleuser-sample
        title: Jupyterhub zero to jupyterhub k8s images singleuser sample
        working_directory: ./applications/jupyterhub/zero-to-jupyterhub-k8s/images/singleuser-sample
        tag: '${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_SINGLEUSER_SAMPLE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_SINGLEUSER_SAMPLE_TAG_EXISTS}}',
                '{{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_SINGLEUSER_SAMPLE_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_SINGLEUSER_SAMPLE_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_SINGLEUSER_SAMPLE_TAG_FORCE_BUILD}}')
                == false
      jupyterhub-zero-to-jupyterhub-k8s-images-network-tools:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-zero-to-jupyterhub-k8s-images-network-tools
        title: Jupyterhub zero to jupyterhub k8s images network tools
        working_directory: ./applications/jupyterhub/zero-to-jupyterhub-k8s/images/network-tools
        tag: '${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_NETWORK_TOOLS_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_NETWORK_TOOLS_TAG_EXISTS}}',
                '{{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_NETWORK_TOOLS_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_NETWORK_TOOLS_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_NETWORK_TOOLS_TAG_FORCE_BUILD}}')
                == false
      jupyterhub-zero-to-jupyterhub-k8s-images-hub:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-zero-to-jupyterhub-k8s-images-hub
        title: Jupyterhub zero to jupyterhub k8s images hub
        working_directory: ./applications/jupyterhub/zero-to-jupyterhub-k8s/images/hub
        tag: '${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_HUB_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_HUB_TAG_EXISTS}}',
                '{{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_HUB_TAG_EXISTS}}') ==
                true
              forceNoCache: includes('${{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_HUB_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_ZERO_TO_JUPYTERHUB_K8S_IMAGES_HUB_TAG_FORCE_BUILD}}')
                == false
      jupyterhub-jupyterhub:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-jupyterhub
        title: Jupyterhub jupyterhub
        working_directory: ./applications/jupyterhub/src/jupyterhub
        tag: '${{JUPYTERHUB_JUPYTERHUB_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_JUPYTERHUB_TAG_EXISTS}}',
                '{{JUPYTERHUB_JUPYTERHUB_TAG_EXISTS}}') == true
              forceNoCache: includes('${{JUPYTERHUB_JUPYTERHUB_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_JUPYTERHUB_TAG_FORCE_BUILD}}') == false
      jupyterhub-jupyterhub-singleuser:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-jupyterhub-singleuser
        title: Jupyterhub jupyterhub singleuser
        working_directory: ./applications/jupyterhub/src/jupyterhub/singleuser
        tag: '${{JUPYTERHUB_JUPYTERHUB_SINGLEUSER_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_JUPYTERHUB_SINGLEUSER_TAG_EXISTS}}',
                '{{JUPYTERHUB_JUPYTERHUB_SINGLEUSER_TAG_EXISTS}}') == true
              forceNoCache: includes('${{JUPYTERHUB_JUPYTERHUB_SINGLEUSER_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_JUPYTERHUB_SINGLEUSER_TAG_FORCE_BUILD}}') == false
      jupyterhub-jupyterhub-examples-service-fastapi:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-jupyterhub-examples-service-fastapi
        title: Jupyterhub jupyterhub examples service fastapi
        working_directory: ./applications/jupyterhub/src/jupyterhub/examples/service-fastapi
        tag: '${{JUPYTERHUB_JUPYTERHUB_EXAMPLES_SERVICE_FASTAPI_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_JUPYTERHUB_EXAMPLES_SERVICE_FASTAPI_TAG_EXISTS}}',
                '{{JUPYTERHUB_JUPYTERHUB_EXAMPLES_SERVICE_FASTAPI_TAG_EXISTS}}') ==
                true
              forceNoCache: includes('${{JUPYTERHUB_JUPYTERHUB_EXAMPLES_SERVICE_FASTAPI_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_JUPYTERHUB_EXAMPLES_SERVICE_FASTAPI_TAG_FORCE_BUILD}}')
                == false
      jupyterhub-jupyterhub-examples-postgres-db:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-jupyterhub-examples-postgres-db
        title: Jupyterhub jupyterhub examples postgres db
        working_directory: ./applications/jupyterhub/src/jupyterhub/examples/postgres/db
        tag: '${{JUPYTERHUB_JUPYTERHUB_EXAMPLES_POSTGRES_DB_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_JUPYTERHUB_EXAMPLES_POSTGRES_DB_TAG_EXISTS}}',
                '{{JUPYTERHUB_JUPYTERHUB_EXAMPLES_POSTGRES_DB_TAG_EXISTS}}') == true
              forceNoCache: includes('${{JUPYTERHUB_JUPYTERHUB_EXAMPLES_POSTGRES_DB_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_JUPYTERHUB_EXAMPLES_POSTGRES_DB_TAG_FORCE_BUILD}}')
                == false
      jupyterhub-jupyterhub-examples-postgres-hub:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-jupyterhub-examples-postgres-hub
        title: Jupyterhub jupyterhub examples postgres hub
        working_directory: ./applications/jupyterhub/src/jupyterhub/examples/postgres/hub
        tag: '${{JUPYTERHUB_JUPYTERHUB_EXAMPLES_POSTGRES_HUB_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_JUPYTERHUB_EXAMPLES_POSTGRES_HUB_TAG_EXISTS}}',
                '{{JUPYTERHUB_JUPYTERHUB_EXAMPLES_POSTGRES_HUB_TAG_EXISTS}}') == true
              forceNoCache: includes('${{JUPYTERHUB_JUPYTERHUB_EXAMPLES_POSTGRES_HUB_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_JUPYTERHUB_EXAMPLES_POSTGRES_HUB_TAG_FORCE_BUILD}}')
                == false
      jupyterhub-jupyterhub-demo-image:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-jupyterhub-demo-image
        title: Jupyterhub jupyterhub demo image
        working_directory: ./applications/jupyterhub/src/jupyterhub/demo-image
        tag: '${{JUPYTERHUB_JUPYTERHUB_DEMO_IMAGE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_JUPYTERHUB_DEMO_IMAGE_TAG_EXISTS}}',
                '{{JUPYTERHUB_JUPYTERHUB_DEMO_IMAGE_TAG_EXISTS}}') == true
              forceNoCache: includes('${{JUPYTERHUB_JUPYTERHUB_DEMO_IMAGE_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_JUPYTERHUB_DEMO_IMAGE_TAG_FORCE_BUILD}}') == false
      jupyterhub-jupyterhub-onbuild:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/jupyterhub-jupyterhub-onbuild
        title: Jupyterhub jupyterhub onbuild
        working_directory: ./applications/jupyterhub/src/jupyterhub/onbuild
        tag: '${{JUPYTERHUB_JUPYTERHUB_ONBUILD_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_JUPYTERHUB_ONBUILD_TAG_EXISTS}}',
                '{{JUPYTERHUB_JUPYTERHUB_ONBUILD_TAG_EXISTS}}') == true
              forceNoCache: includes('${{JUPYTERHUB_JUPYTERHUB_ONBUILD_TAG_FORCE_BUILD}}',
                '{{JUPYTERHUB_JUPYTERHUB_ONBUILD_TAG_FORCE_BUILD}}') == false
  deployment:
    stage: deploy
    type: helm
    working_directory: ./${{CF_REPO_NAME}}
    title: Installing chart
    arguments:
      helm_version: 3.6.2
      chart_name: deployment/helm
      release_name: test-${{NAMESPACE_BASENAME}}
      kube_context: '${{CLUSTER_NAME}}'
      namespace: test-${{NAMESPACE_BASENAME}}
      chart_version: '${{CF_SHORT_REVISION}}'
      cmd_ps: --timeout 600s --create-namespace
      custom_value_files:
      - ./deployment/helm/values.yaml
      custom_values: []
  approval:
    type: pending-approval
    stage: qa
    title: Approve anyway and delete deployment
    description: The pipeline will fail after ${{WAIT_ON_FAIL}} minutes
    timeout:
      timeUnit: minutes
      duration: '${{WAIT_ON_FAIL}}'
      finalState: denied
    when:
      condition:
        all:
          error: '"${{FAILED}}" == "failed"'
  delete_deployment:
    title: Delete deployment
    description: The deployment is deleted at the end of the pipeline
    image: codefresh/kubectl
    stage: qa
    commands:
    - kubectl config use-context ${{CLUSTER_NAME}}
    - kubectl delete ns test-${{NAMESPACE_BASENAME}}
