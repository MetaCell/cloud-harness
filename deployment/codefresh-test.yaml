version: '1.0'
stages:
- prepare
- build
- unittest
- deploy
- qa
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: prepare
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}'
    git: github
  post_main_clone:
    title: Post main clone
    type: parallel
    stage: prepare
    steps:
    - title: Cloning cloud-harness repository...
      type: git-clone
      stage: prepare
      repo: https://github.com/MetaCell/cloud-harness.git
      revision: '${{CLOUDHARNESS_BRANCH}}'
      working_directory: .
      git: github
  prepare_deployment:
    title: Prepare helm chart
    image: python:3.9.10
    stage: prepare
    working_directory: .
    commands:
    - bash cloud-harness/install.sh
    - harness-deployment . -n test-${{NAMESPACE_BASENAME}}-${{CF_SHORT_REVISION}}
      -d ${{CF_SHORT_REVISION}}.${{DOMAIN}} -r ${{REGISTRY}} -rs ${{REGISTRY_SECRET}}
      -e test --write-env -N -i samples
    - cat deployment/.env >> ${{CF_VOLUME_PATH}}/env_vars_to_export
    - cat ${{CF_VOLUME_PATH}}/env_vars_to_export
  prepare_deployment_view:
    commands:
    - helm template ./deployment/helm --debug -n test-${{NAMESPACE_BASENAME}}-${{CF_SHORT_REVISION}}
    environment:
    - ACTION=auth
    - KUBE_CONTEXT=test-${{CF_BUILD_ID}}
    image: codefresh/cfstep-helm:3.6.2
    stage: prepare
    title: View helm chart
  build_base_images:
    title: Build base images
    type: parallel
    stage: build
    steps:
      cloudharness-base:
        type: build
        stage: build
        dockerfile: infrastructure/base-images/cloudharness-base/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/cloudharness-base
        title: Cloudharness base
        working_directory: ./.
        tag: '${{CLOUDHARNESS_BASE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{CLOUDHARNESS_BASE_TAG_EXISTS}}', '{{CLOUDHARNESS_BASE_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{CLOUDHARNESS_BASE_TAG_FORCE_BUILD}}', '{{CLOUDHARNESS_BASE_TAG_FORCE_BUILD}}')
                == false
      cloudharness-frontend-build:
        type: build
        stage: build
        dockerfile: infrastructure/base-images/cloudharness-frontend-build/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/cloudharness-frontend-build
        title: Cloudharness frontend build
        working_directory: ./.
        tag: '${{CLOUDHARNESS_FRONTEND_BUILD_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{CLOUDHARNESS_FRONTEND_BUILD_TAG_EXISTS}}',
                '{{CLOUDHARNESS_FRONTEND_BUILD_TAG_EXISTS}}') == true
              forceNoCache: includes('${{CLOUDHARNESS_FRONTEND_BUILD_TAG_FORCE_BUILD}}',
                '{{CLOUDHARNESS_FRONTEND_BUILD_TAG_FORCE_BUILD}}') == false
  build_static_images:
    title: Build static images
    type: parallel
    stage: build
    steps:
      cloudharness-flask:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: cloudharness/cloudharness-flask
        title: Cloudharness flask
        working_directory: ./infrastructure/common-images/cloudharness-flask
        tag: '${{CLOUDHARNESS_FLASK_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{CLOUDHARNESS_FLASK_TAG_EXISTS}}', '{{CLOUDHARNESS_FLASK_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{CLOUDHARNESS_FLASK_TAG_FORCE_BUILD}}', '{{CLOUDHARNESS_FLASK_TAG_FORCE_BUILD}}')
                == false
  build_application_images:
    type: parallel
    stage: build
    steps:
      nfsserver:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/nfsserver
        title: Nfsserver
        working_directory: ./applications/nfsserver
        tag: '${{NFSSERVER_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{NFSSERVER_TAG_EXISTS}}', '{{NFSSERVER_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{NFSSERVER_TAG_FORCE_BUILD}}', '{{NFSSERVER_TAG_FORCE_BUILD}}')
                == false
      accounts:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/accounts
        title: Accounts
        working_directory: ./applications/accounts
        tag: '${{ACCOUNTS_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{ACCOUNTS_TAG_EXISTS}}', '{{ACCOUNTS_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{ACCOUNTS_TAG_FORCE_BUILD}}', '{{ACCOUNTS_TAG_FORCE_BUILD}}')
                == false
      samples:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_FRONTEND_BUILD=${{REGISTRY}}/cloudharness/cloudharness-frontend-build:${{CLOUDHARNESS_FRONTEND_BUILD_TAG}}
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/cloudharness/cloudharness-flask:${{CLOUDHARNESS_FLASK_TAG}}
        image_name: cloudharness/samples
        title: Samples
        working_directory: ./applications/samples
        tag: '${{SAMPLES_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{SAMPLES_TAG_EXISTS}}', '{{SAMPLES_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{SAMPLES_TAG_FORCE_BUILD}}', '{{SAMPLES_TAG_FORCE_BUILD}}')
                == false
      samples-print-file:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: cloudharness/samples-print-file
        title: Samples print file
        working_directory: ./applications/samples/tasks/print-file
        tag: '${{SAMPLES_PRINT_FILE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{SAMPLES_PRINT_FILE_TAG_EXISTS}}', '{{SAMPLES_PRINT_FILE_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{SAMPLES_PRINT_FILE_TAG_FORCE_BUILD}}', '{{SAMPLES_PRINT_FILE_TAG_FORCE_BUILD}}')
                == false
      samples-secret:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: cloudharness/samples-secret
        title: Samples secret
        working_directory: ./applications/samples/tasks/secret
        tag: '${{SAMPLES_SECRET_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{SAMPLES_SECRET_TAG_EXISTS}}', '{{SAMPLES_SECRET_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{SAMPLES_SECRET_TAG_FORCE_BUILD}}', '{{SAMPLES_SECRET_TAG_FORCE_BUILD}}')
                == false
      samples-sum:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: cloudharness/samples-sum
        title: Samples sum
        working_directory: ./applications/samples/tasks/sum
        tag: '${{SAMPLES_SUM_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{SAMPLES_SUM_TAG_EXISTS}}', '{{SAMPLES_SUM_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{SAMPLES_SUM_TAG_FORCE_BUILD}}', '{{SAMPLES_SUM_TAG_FORCE_BUILD}}')
                == false
      common:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/cloudharness/cloudharness-flask:${{CLOUDHARNESS_FLASK_TAG}}
        image_name: cloudharness/common
        title: Common
        working_directory: ./applications/common/server
        tag: '${{COMMON_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{COMMON_TAG_EXISTS}}', '{{COMMON_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{COMMON_TAG_FORCE_BUILD}}', '{{COMMON_TAG_FORCE_BUILD}}')
                == false
      workflows-send-result-event:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: cloudharness/workflows-send-result-event
        title: Workflows send result event
        working_directory: ./applications/workflows/tasks/send-result-event
        tag: '${{WORKFLOWS_SEND_RESULT_EVENT_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKFLOWS_SEND_RESULT_EVENT_TAG_EXISTS}}',
                '{{WORKFLOWS_SEND_RESULT_EVENT_TAG_EXISTS}}') == true
              forceNoCache: includes('${{WORKFLOWS_SEND_RESULT_EVENT_TAG_FORCE_BUILD}}',
                '{{WORKFLOWS_SEND_RESULT_EVENT_TAG_FORCE_BUILD}}') == false
      workflows-extract-download:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/workflows-extract-download
        title: Workflows extract download
        working_directory: ./applications/workflows/tasks/extract-download
        tag: '${{WORKFLOWS_EXTRACT_DOWNLOAD_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKFLOWS_EXTRACT_DOWNLOAD_TAG_EXISTS}}',
                '{{WORKFLOWS_EXTRACT_DOWNLOAD_TAG_EXISTS}}') == true
              forceNoCache: includes('${{WORKFLOWS_EXTRACT_DOWNLOAD_TAG_FORCE_BUILD}}',
                '{{WORKFLOWS_EXTRACT_DOWNLOAD_TAG_FORCE_BUILD}}') == false
      workflows-notify-queue:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: cloudharness/workflows-notify-queue
        title: Workflows notify queue
        working_directory: ./applications/workflows/tasks/notify-queue
        tag: '${{WORKFLOWS_NOTIFY_QUEUE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKFLOWS_NOTIFY_QUEUE_TAG_EXISTS}}',
                '{{WORKFLOWS_NOTIFY_QUEUE_TAG_EXISTS}}') == true
              forceNoCache: includes('${{WORKFLOWS_NOTIFY_QUEUE_TAG_FORCE_BUILD}}',
                '{{WORKFLOWS_NOTIFY_QUEUE_TAG_FORCE_BUILD}}') == false
      workflows:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/cloudharness/cloudharness-flask:${{CLOUDHARNESS_FLASK_TAG}}
        image_name: cloudharness/workflows
        title: Workflows
        working_directory: ./applications/workflows/server
        tag: '${{WORKFLOWS_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKFLOWS_TAG_EXISTS}}', '{{WORKFLOWS_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{WORKFLOWS_TAG_FORCE_BUILD}}', '{{WORKFLOWS_TAG_FORCE_BUILD}}')
                == false
  tests_unit:
    stage: unittest
    type: parallel
    steps:
      samples_ut:
        title: Unit tests for samples
        commands:
        - pytest /usr/src/app/samples/test
        image: '${{REGISTRY}}/cloudharness/samples:${{SAMPLES_TAG}}'
  deployment:
    stage: deploy
    type: helm
    working_directory: ./${{CF_REPO_NAME}}
    title: Installing chart
    arguments:
      helm_version: 3.6.2
      chart_name: deployment/helm
      release_name: test-${{NAMESPACE_BASENAME}}-${{CF_SHORT_REVISION}}
      kube_context: '${{CLUSTER_NAME}}'
      namespace: test-${{NAMESPACE_BASENAME}}-${{CF_SHORT_REVISION}}
      chart_version: '${{CF_BUILD_ID}}'
      cmd_ps: --timeout 600s --create-namespace
      custom_value_files:
      - ./deployment/helm/values.yaml
      custom_values:
      - apps_samples_harness_secrets_asecret=${{ASECRET}}
  build_test_images:
    title: Build test images
    type: parallel
    stage: qa
    steps:
      test-e2e:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        image_name: cloudharness/test-e2e
        title: Test e2e
        working_directory: ./test/test-e2e
        tag: '${{TEST_E2E_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{TEST_E2E_TAG_EXISTS}}', '{{TEST_E2E_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{TEST_E2E_TAG_FORCE_BUILD}}', '{{TEST_E2E_TAG_FORCE_BUILD}}')
                == false
      test-api:
        type: build
        stage: build
        dockerfile: test/test-api/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/cloudharness/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/cloudharness/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: cloudharness/test-api
        title: Test api
        working_directory: ./.
        tag: '${{TEST_API_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{TEST_API_TAG_EXISTS}}', '{{TEST_API_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{TEST_API_TAG_FORCE_BUILD}}', '{{TEST_API_TAG_FORCE_BUILD}}')
                == false
  wait_deployment:
    stage: qa
    title: Wait deployment to be ready
    image: codefresh/kubectl
    commands:
    - kubectl config use-context ${{CLUSTER_NAME}}
    - kubectl config set-context --current --namespace=test-${{NAMESPACE_BASENAME}}-${{CF_SHORT_REVISION}}
    - kubectl rollout status deployment/accounts
    - kubectl rollout status deployment/argo-server-gk
    - kubectl rollout status deployment/samples
    - kubectl rollout status deployment/samples-gk
    - kubectl rollout status deployment/common
    - kubectl rollout status deployment/workflows
    - sleep 60
  tests_api:
    stage: qa
    title: Api tests
    working_directory: /home/test
    image: '${{REGISTRY}}/cloudharness/test-api:${{TEST_API_TAG}}'
    fail_fast: false
    commands:
    - echo $APP_NAME
    scale:
      samples_api_test:
        title: samples api test
        volumes:
        - '${{CF_REPO_NAME}}/applications/samples:/home/test'
        - '${{CF_REPO_NAME}}/deployment/helm/values.yaml:/opt/cloudharness/resources/allvalues.yaml'
        environment:
        - APP_URL=https://samples.${{CF_SHORT_REVISION}}.${{DOMAIN}}/api
        - USERNAME=sample@testuser.com
        - PASSWORD=test
        commands:
        - st --pre-run cloudharness_test.apitest_init run api/openapi.yaml --base-url
          https://samples.${{CF_SHORT_REVISION}}.${{DOMAIN}}/api -c all --skip-deprecated-operations
          --hypothesis-suppress-health-check=too_slow --hypothesis-deadline=180000
          --request-timeout=180000 --hypothesis-max-examples=2 --show-errors-tracebacks
        - pytest -v test/api
      common_api_test:
        title: common api test
        volumes:
        - '${{CF_REPO_NAME}}/applications/common:/home/test'
        - '${{CF_REPO_NAME}}/deployment/helm/values.yaml:/opt/cloudharness/resources/allvalues.yaml'
        environment:
        - APP_URL=https://common.${{CF_SHORT_REVISION}}.${{DOMAIN}}/api
        commands:
        - st --pre-run cloudharness_test.apitest_init run api/openapi.yaml --base-url
          https://common.${{CF_SHORT_REVISION}}.${{DOMAIN}}/api -c all
      workflows_api_test:
        title: workflows api test
        volumes:
        - '${{CF_REPO_NAME}}/applications/workflows:/home/test'
        - '${{CF_REPO_NAME}}/deployment/helm/values.yaml:/opt/cloudharness/resources/allvalues.yaml'
        environment:
        - APP_URL=https://workflows.${{CF_SHORT_REVISION}}.${{DOMAIN}}/api
        commands:
        - st --pre-run cloudharness_test.apitest_init run api/openapi.yaml --base-url
          https://workflows.${{CF_SHORT_REVISION}}.${{DOMAIN}}/api -c all
    hooks:
      on_fail:
        exec:
          image: alpine
          commands:
          - cf_export  FAILED=failed
  tests_e2e:
    stage: qa
    title: End to end tests
    working_directory: /home/test
    image: '${{REGISTRY}}/cloudharness/test-e2e:${{TEST_E2E_TAG}}'
    fail_fast: false
    commands:
    - yarn test
    scale:
      samples_e2e_test:
        title: samples e2e test
        volumes:
        - '${{CF_REPO_NAME}}/applications/samples/test/e2e:/home/test/__tests__/samples'
        environment:
        - APP_URL=https://samples.${{CF_SHORT_REVISION}}.${{DOMAIN}}
        - USERNAME=sample@testuser.com
        - PASSWORD=test
    hooks:
      on_fail:
        exec:
          image: alpine
          commands:
          - cf_export  FAILED=failed
  approval:
    type: pending-approval
    stage: qa
    title: Approve with failed tests
    description: The pipeline will fail after ${{WAIT_ON_FAIL}} minutes
    timeout:
      timeUnit: minutes
      duration: '${{WAIT_ON_FAIL}}'
      finalState: denied
    when:
      condition:
        all:
          error: '"${{FAILED}}" == "failed"'
          wait_on_fail: '${{WAIT_ON_FAIL}}'
  dummy_end:
    title: Dummy step
    description: Without this, the on_finish hook is executed before the approval
      step
    image: python:3.9.10
    stage: qa
    when:
      condition:
        all:
          error: '"${{FAILED}}" == "failed"'
          wait_on_fail: '${{WAIT_ON_FAIL}}'
hooks:
  on_finish:
    image: codefresh/kubectl
    commands:
    - kubectl config use-context ${{CLUSTER_NAME}}
    - kubectl delete ns test-${{NAMESPACE_BASENAME}}-${{CF_SHORT_REVISION}}
