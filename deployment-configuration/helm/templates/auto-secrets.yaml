{{- define "deploy_utils.secret" }}
{{- $secret_name := printf "%s" .app.harness.deployment.name }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secret_name }}
  namespace: {{ .root.Values.namespace }}
  labels:
    app: {{ .app.harness.deployment.name }}
type: Opaque
{{- $secret := (lookup "v1" "Secret" .root.Values.namespace $secret_name) }}
{{- if $secret }}
# secret already exists
stringData:
  {{- range $k, $v := .app.harness.secrets }}
    {{- if and $v (eq (typeOf $v) "string") }}
      {{- if (ne $v "?")}}
  # Set secret value to value in values.yaml if specified
  {{ $k }}: {{ $v }}
      {{- else }}
  # Refresh at any deployment for ? (pure random) value
  {{ $k }}: {{ randAlphaNum 20 }}
      {{- end }} 
    {{- else if eq (typeOf $secret.data) "map" }}{{- if not (hasKey $secret.data $k) }}
  # Create a random secret value if not specified in values.yaml if
  # it is not set and it is not already in the deployed secret (static random secret)
  {{ $k }}: {{ randAlphaNum 20 }} 
    {{- end}}{{- end}}
    {{- else }}
  failsafe: check your values file
    {{- end }}
  {{- end }}
{{- else }}
# secret doesn't exist
stringData:
    {{- range $k, $v := .app.harness.secrets }}
  {{ $k }}: {{ $v | default (randAlphaNum 20) }}
    {{- end }}
  {{- end }}
---
{{- end }}
{{- range $app := .Values.apps }}
  {{- if $app.harness.secrets }}{{- if ne (len $app.harness.secrets) 0 }}
  {{- include "deploy_utils.secret" (dict "root" $ "app" $app) }}
  {{- end }}{{- end }}
  {{- range $subapp := $app }}
  {{- if contains "map" (typeOf $subapp)  }}
    {{- if hasKey $subapp "harness" }}{{- if $app.harness.secrets }}{{- if ne (len $app.harness.secrets) 0 }}
      {{- include "deploy_utils.secret" (dict "root" $ "app" $subapp) }}
    {{- end }}{{- end }}{{- end }}
  {{- end }}
  {{- end }}
{{- end }}